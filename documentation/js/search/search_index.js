var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.625,1,2.395]],["body/controllers/AppController.html",[0,2.487,1,3.665,2,1.938,3,0.318,4,0.284,5,0.284,6,3.578,7,0.588,8,1.715,9,5.35,10,2.075,11,0.023,12,0.935,13,4.206,14,1.337,15,1.82,16,0.7,17,0.935,18,3.407,19,3.578,20,0.318,21,0.013,22,2.404,23,2.075,24,1.337,25,4.206,26,0.017,27,0.017]],["title/modules/AppModule.html",[28,1.428,29,2.395]],["body/modules/AppModule.html",[1,3.355,2,1.942,3,0.221,4,0.198,5,0.198,11,0.023,16,0.832,17,0.65,18,3.411,19,2.49,20,0.221,21,0.009,26,0.013,27,0.013,28,2.001,29,4.597,30,1.443,31,1.443,32,1.673,33,1.673,34,1.443,35,2.824,36,1.673,37,2.49,38,2.49,39,2.49,40,3.702,41,3.702,42,3.702,43,3.411,44,2.409,45,1.673,46,1.673,47,2.926,48,3.586,49,2.926,50,2.926,51,2.926,52,2.926,53,2.926,54,4.215,55,2.202,56,2.862,57,2.926,58,2.926,59,2.926]],["title/injectables/AppService.html",[18,2.016,60,0.692]],["body/injectables/AppService.html",[3,0.338,4,0.302,5,0.302,7,0.624,8,1.781,9,5.468,11,0.022,12,0.992,14,1.419,15,1.891,16,0.579,17,0.992,18,3.205,20,0.338,21,0.014,24,1.419,26,0.018,27,0.018,60,1.1,61,1.699,62,3.798,63,4.465,64,4.465,65,4.465]],["title/controllers/AuthController.html",[0,1.625,66,2.395]],["body/controllers/AuthController.html",[0,2.224,2,1.636,3,0.269,4,0.24,5,0.24,7,0.497,8,1.534,10,1.752,11,0.023,12,0.789,14,1.128,16,0.798,17,0.789,20,0.269,21,0.011,22,2.03,23,1.752,24,1.128,26,0.015,27,0.015,66,3.277,67,3.021,68,3.632,69,3.551,70,3.995,71,3.551,72,3.551,73,1.272,74,1.128,75,0.654,76,1.003,77,2.672,78,3.021,79,3.021,80,1.752,81,3.551,82,3.134,83,3.021,84,3.632,85,3.021,86,2.672,87,2.411,88,3.551,89,3.551,90,3.551,91,3.551,92,1.752,93,2.557,94,3.551]],["title/modules/AuthModule.html",[28,1.428,40,2.189]],["body/modules/AuthModule.html",[2,2.062,3,0.241,4,0.215,5,0.215,11,0.023,16,0.818,17,0.707,20,0.241,21,0.01,26,0.014,27,0.014,28,2.096,30,1.57,31,1.57,32,1.82,33,1.82,34,1.57,35,2.958,36,1.82,40,4.111,43,3.507,44,2.558,45,1.82,46,1.82,48,3.807,66,3.514,82,3.507,83,2.708,95,2.708,96,2.708,97,3.183,98,3.806,99,3.183,100,3.183,101,3.183,102,4.475,103,2.161,104,3.183,105,2.395,106,3.183,107,3.183,108,3.183,109,2.708,110,3.183,111,3.183,112,3.183]],["title/interfaces/AuthRequest.html",[113,1.869,114,2.395]],["body/interfaces/AuthRequest.html",[3,0.334,4,0.298,5,0.298,7,0.617,11,0.022,16,0.722,20,0.334,26,0.018,27,0.018,75,0.813,113,2.339,114,3.78,115,2.998,116,3.756,117,1.994,118,5.187,119,2.402,120,6.402,121,3.158,122,3.756,123,4.415]],["title/injectables/AuthService.html",[60,0.692,82,2.016]],["body/injectables/AuthService.html",[3,0.177,4,0.158,5,0.158,7,0.327,8,1.133,11,0.023,12,0.961,14,1.133,15,2.143,16,0.765,17,0.519,20,0.177,21,0.007,23,1.759,24,1.133,26,0.011,27,0.011,60,0.7,61,0.889,68,2.683,73,1.549,74,1.374,75,0.796,76,1.221,82,2.038,92,2.133,93,3.199,105,1.757,121,2.71,124,1.987,125,3.141,126,4.434,127,3.565,128,2.038,129,2.336,130,5.494,131,4.324,132,2.387,133,2.336,134,3.565,135,2.336,136,2.421,137,3.565,138,2.336,139,1.987,140,2.683,141,1.237,142,2.336,143,2.212,144,2.336,145,0.946,146,1.586,147,2.336,148,2.212,149,1.987,150,3.003,151,3.254,152,2.336,153,1.987,154,1.987,155,2.336,156,1.987,157,2.336,158,1.987,159,2.336,160,2.336,161,3.565,162,2.336,163,2.336,164,1.757,165,1.335,166,1.237,167,2.336,168,2.336,169,2.336]],["title/classes/ConflictError.html",[21,0.011,170,2.189]],["body/classes/ConflictError.html",[3,0.381,4,0.34,5,0.34,11,0.021,20,0.381,21,0.016,26,0.019,27,0.019,117,2.159,145,2.442,170,3.741,171,1.8,172,3.783,173,2.663]],["title/injectables/ConflictInterceptor.html",[60,0.692,174,2.654]],["body/injectables/ConflictInterceptor.html",[3,0.263,4,0.235,5,0.235,7,0.486,8,1.511,11,0.023,12,0.772,14,1.104,16,0.703,17,0.772,20,0.263,21,0.011,24,1.104,26,0.015,27,0.015,60,0.933,61,1.322,73,1.244,74,1.104,75,0.639,76,0.981,145,2.195,165,2.718,166,1.841,170,3.363,172,2.614,174,3.578,175,2.955,176,3.229,177,3.229,178,3.617,179,3.681,180,3.958,181,3.474,182,2.155,183,3.681,184,3.474,185,3.229,186,2.359,187,1.986,188,1.841,189,2.359,190,2.359,191,2.359,192,2.955,193,3.474]],["title/classes/CreatePostDto.html",[21,0.011,194,2.016]],["body/classes/CreatePostDto.html",[3,0.236,4,0.211,5,0.211,7,0.436,10,2.525,11,0.022,12,1.354,15,2.056,16,0.573,20,0.236,21,0.014,26,0.014,27,0.014,75,1.122,76,1.807,80,3.157,117,1.58,119,1.904,171,1.118,194,2.523,195,3.754,196,2.348,197,4.355,198,4.355,199,4.355,200,3.754,201,2.033,202,2.997,203,3.852,204,3.121,205,3.121,206,4.995,207,3.121,208,4.187,209,3.121,210,2.338,211,3.121,212,3.121,213,2.119,214,3.121,215,4.413,216,2.119,217,3.121]],["title/classes/CreateUserDto.html",[21,0.011,218,2.016]],["body/classes/CreateUserDto.html",[3,0.144,4,0.129,5,0.129,7,0.267,10,1.873,11,0.022,12,0.963,15,1.703,16,0.395,20,0.144,21,0.01,26,0.01,27,0.01,68,3.799,74,1.206,75,0.798,76,0.859,92,1.873,93,2.509,117,1.09,119,1.313,121,2.613,171,0.683,201,1.402,203,2.857,206,3.687,208,3.261,210,1.01,216,1.294,218,1.739,219,1.622,220,1.434,221,1.906,222,5.815,223,3.799,224,5.048,225,4.334,226,3.042,227,4.334,228,3.042,229,3.042,230,4.334,231,4.334,232,3.042,233,4.334,234,4.334,235,4.334,236,4.334,237,3.042,238,4.334,239,4.334,240,3.042,241,5.048,242,5.048,243,4.295,244,1.906,245,3.042,246,3.042,247,4.334,248,3.042,249,3.042,250,3.042,251,3.042,252,3.042,253,3.042,254,3.042,255,3.042,256,3.042,257,3.042,258,1.622,259,2.588,260,2.588,261,2.588,262,2.588,263,1.906,264,3.042,265,3.042,266,3.042,267,3.042,268,3.042,269,3.042,270,3.042,271,3.042,272,1.906,273,1.622,274,1.622,275,1.622,276,1.906,277,1.906,278,1.906,279,1.906,280,1.622,281,1.622,282,1.622,283,1.906]],["title/classes/DatabaseError.html",[21,0.011,284,2.395]],["body/classes/DatabaseError.html",[3,0.381,4,0.34,5,0.34,11,0.021,20,0.381,21,0.016,26,0.019,27,0.019,117,2.159,145,2.442,171,1.8,173,2.663,284,4.094,285,4.277]],["title/injectables/DatabaseInterceptor.html",[60,0.692,286,2.654]],["body/injectables/DatabaseInterceptor.html",[3,0.24,4,0.214,5,0.214,7,0.443,8,1.418,11,0.023,12,0.704,14,1.007,16,0.795,17,0.704,20,0.24,21,0.01,24,1.007,26,0.014,27,0.014,60,0.875,61,1.207,73,1.135,74,1.007,75,0.583,76,0.895,145,2.269,165,2.551,166,1.68,176,3.03,177,3.03,178,3.477,179,3.506,180,3.805,182,1.967,183,3.506,185,3.03,186,2.153,187,1.812,188,1.68,189,2.153,190,2.153,191,2.153,284,3.03,286,3.358,287,2.697,288,3.17,289,3.17,290,3.17,291,2.153,292,2.386,293,2.386,294,2.386,295,3.17,296,2.386,297,2.386,298,1.564,299,3.17,300,3.17,301,3.17,302,3.17]],["title/injectables/JwtAuthGuard.html",[56,2.395,60,0.692]],["body/injectables/JwtAuthGuard.html",[3,0.178,4,0.159,5,0.159,7,0.329,8,1.138,10,1.159,11,0.023,12,0.796,14,0.747,16,0.785,17,0.522,20,0.178,21,0.007,23,1.159,24,1.543,26,0.011,27,0.011,55,1.768,56,2.432,60,0.703,61,0.894,73,1.283,74,1.138,75,0.659,76,1.011,85,1.999,93,1.245,103,1.595,114,1.595,117,1.283,118,1.999,121,1.159,126,3.047,128,2.047,132,2.825,150,2.222,165,1.343,178,3.012,182,1.458,187,2.047,213,1.595,291,1.595,303,1.999,304,3.581,305,5.226,306,2.349,307,5.507,308,2.349,309,3.581,310,2.349,311,2.349,312,2.349,313,3.581,314,2.349,315,2.349,316,2.349,317,2.349,318,2.349,319,2.349,320,2.695,321,1.999,322,2.349,323,1.768,324,2.349,325,1.999,326,3.047,327,2.349,328,2.349,329,2.349,330,1.595,331,2.349,332,1.999,333,2.349,334,2.349,335,2.695,336,2.349,337,2.349,338,2.349,339,2.349,340,2.349,341,3.581,342,2.349,343,1.595,344,2.349,345,2.349,346,2.349,347,2.349,348,2.349,349,2.349]],["title/injectables/JwtStrategy.html",[60,0.692,98,2.189]],["body/injectables/JwtStrategy.html",[3,0.256,4,0.229,5,0.229,7,0.473,8,1.484,11,0.023,12,1.038,14,1.076,16,0.785,17,0.752,20,0.256,21,0.011,24,1.076,26,0.015,27,0.015,60,0.916,61,1.289,73,1.212,74,1.076,75,0.623,76,0.956,92,1.67,98,2.898,103,2.299,109,2.88,117,1.673,125,3.057,128,3.057,136,3.172,148,3.577,149,2.88,153,2.88,201,1.56,320,2.547,321,2.88,325,2.88,350,2.88,351,4.671,352,4.671,353,3.385,354,4.671,355,3.385,356,3.385,357,3.385,358,2.88,359,2.88,360,3.385,361,3.385,362,3.385,363,3.385,364,3.385,365,3.385,366,3.385,367,3.385]],["title/classes/LoginRequestBody.html",[21,0.011,70,2.395]],["body/classes/LoginRequestBody.html",[3,0.289,4,0.258,5,0.258,7,0.535,10,2.502,11,0.022,12,1.127,15,2.044,16,0.496,20,0.289,21,0.016,26,0.016,27,0.016,70,3.444,75,0.933,92,2.807,93,3.342,119,2.189,171,1.369,203,4.283,208,3.816,216,2.596,258,3.253,259,4.315,260,4.315,261,4.315,262,4.315,273,3.253,274,3.253,275,3.253,280,3.253,281,3.253,282,3.253,368,3.253,369,3.823,370,3.823]],["title/classes/NotFoundError.html",[21,0.011,371,2.395]],["body/classes/NotFoundError.html",[3,0.378,4,0.338,5,0.338,11,0.021,20,0.378,21,0.016,26,0.019,27,0.019,117,2.151,145,2.433,171,1.789,173,2.647,343,3.392,371,4.079,372,4.25]],["title/injectables/NotFoundInterceptor.html",[60,0.692,373,2.654]],["body/injectables/NotFoundInterceptor.html",[3,0.257,4,0.23,5,0.23,7,0.475,8,1.489,11,0.023,12,0.755,14,1.08,16,0.75,17,0.755,20,0.257,21,0.011,24,1.08,26,0.015,27,0.015,60,0.919,61,1.294,73,1.218,74,1.08,75,0.626,76,0.96,145,2.171,165,2.678,166,1.801,176,3.181,177,3.181,178,3.584,179,3.64,180,3.922,182,2.109,183,3.64,185,3.181,186,2.309,187,1.944,188,1.801,189,2.309,190,2.309,191,2.309,291,2.309,343,2.309,371,3.181,373,3.525,374,3.986,375,2.893,376,3.4,377,3.4,378,3.4,379,3.4]],["title/classes/Post.html",[21,0.011,80,1.74]],["body/classes/Post.html",[3,0.276,4,0.247,5,0.247,7,0.51,11,0.022,12,1.38,15,2.006,16,0.473,20,0.276,21,0.011,26,0.016,27,0.016,75,1.143,76,1.877,80,2.425,119,2.121,141,1.933,171,1.307,188,2.604,198,4.73,199,4.73,200,4.73,201,2.562,202,3.775,210,3.152,213,3.338,298,1.8,380,3.104,381,3.648,382,3.648,383,3.648,384,3.648,385,3.648,386,3.648]],["title/controllers/PostsController.html",[0,1.625,387,2.395]],["body/controllers/PostsController.html",[0,0.979,2,0.979,3,0.161,4,0.144,5,0.144,7,0.297,8,1.053,10,2.724,11,0.023,12,1.227,14,1.755,15,2.095,16,0.648,17,0.472,20,0.161,21,0.007,22,1.214,23,1.048,24,1.755,26,0.011,27,0.011,73,1.787,74,1.586,75,0.918,76,1.409,77,2.494,80,2.01,86,1.598,87,1.442,125,2.329,139,1.807,194,3.023,201,2.633,202,1.442,330,1.442,387,2.25,388,1.807,389,1.807,390,2.124,391,1.894,392,3.125,393,2.494,394,3.916,395,3.314,396,2.25,397,2.25,398,2.124,399,2.124,400,2.124,401,1.598,402,2.819,403,2.124,404,3.314,405,2.124,406,2.124,407,3.314,408,2.124,409,1.442,410,2.819,411,2.124,412,1.442,413,3.545,414,2.819,415,2.124,416,1.807,417,1.807,418,1.598,419,2.124,420,2.329,421,1.807,422,1.442,423,2.494,424,1.442,425,2.124,426,2.124,427,1.807,428,2.124,429,2.124,430,2.124,431,1.807,432,2.124,433,1.807,434,3.314,435,2.124,436,1.807,437,2.124]],["title/modules/PostsModule.html",[28,1.428,41,2.189]],["body/modules/PostsModule.html",[2,2.308,3,0.284,4,0.254,5,0.254,11,0.022,16,0.781,17,0.834,20,0.284,21,0.012,26,0.016,27,0.016,28,2.283,30,1.85,31,1.85,32,2.144,33,2.144,34,1.85,35,3.223,36,2.144,41,4.15,44,2.863,45,2.144,46,2.144,387,3.828,420,3.686,421,3.192,438,3.192,439,3.192,440,2.971,441,3.751,442,3.751,443,2.547]],["title/injectables/PostsService.html",[60,0.692,420,2.016]],["body/injectables/PostsService.html",[3,0.146,4,0.13,5,0.13,7,0.27,8,0.976,11,0.023,12,1.183,14,1.613,16,0.618,17,0.429,20,0.146,21,0.006,22,1.103,23,0.952,24,1.613,26,0.01,27,0.01,60,0.603,61,0.734,73,1.706,74,1.514,75,0.877,76,1.345,80,0.952,92,0.952,125,3.707,128,1.103,136,4.118,141,1.022,150,2.374,194,2.494,197,2.613,201,2.338,202,1.31,210,3.017,298,1.888,330,2.963,391,1.756,392,2.963,393,2.311,394,3.712,396,2.086,397,2.086,401,2.311,409,2.086,412,2.086,413,2.707,418,1.452,420,1.756,422,1.31,423,2.311,424,1.31,440,2.011,443,1.31,444,1.641,445,1.641,446,1.929,447,2.613,448,1.929,449,4.529,450,1.929,451,1.929,452,1.929,453,1.929,454,1.929,455,1.929,456,3.712,457,1.929,458,3.283,459,1.929,460,1.929,461,3.827,462,3.072,463,1.929,464,1.929,465,1.929,466,1.929]],["title/modules/PrismaModule.html",[28,1.428,42,2.189]],["body/modules/PrismaModule.html",[3,0.296,4,0.265,5,0.265,11,0.022,16,0.669,17,0.87,20,0.296,21,0.012,26,0.016,27,0.016,28,2.332,30,1.932,31,1.932,32,2.239,33,2.239,34,1.932,35,3.292,36,3.292,42,4.128,44,2.946,45,2.239,46,2.239,440,3.222,467,3.332,468,3.332,469,3.917,470,3.917,471,5.154,472,3.917]],["title/injectables/PrismaService.html",[60,0.692,440,1.625]],["body/injectables/PrismaService.html",[3,0.291,4,0.26,5,0.26,7,0.537,8,1.617,11,0.023,12,1.13,14,1.617,16,0.66,17,0.854,20,0.291,21,0.012,26,0.016,27,0.016,60,0.998,61,1.462,117,1.822,125,3.711,141,2.035,151,3.829,188,2.035,440,2.344,473,3.268,474,5.705,475,6.492,476,6.492,477,3.842,478,3.842,479,3.842,480,3.842]],["title/classes/UnauthorizedError.html",[21,0.011,143,2.189]],["body/classes/UnauthorizedError.html",[3,0.381,4,0.34,5,0.34,11,0.021,20,0.381,21,0.016,26,0.019,27,0.019,117,2.159,143,3.741,145,2.442,171,1.8,173,2.663,481,3.783]],["title/injectables/UnauthorizedInterceptor.html",[60,0.692,482,2.654]],["body/injectables/UnauthorizedInterceptor.html",[3,0.256,4,0.229,5,0.229,7,0.473,8,1.484,11,0.023,12,0.752,14,1.076,16,0.748,17,0.752,20,0.256,21,0.011,24,1.076,26,0.015,27,0.015,60,0.916,61,1.289,73,1.212,74,1.076,75,0.623,76,0.956,143,3.577,145,2.166,165,2.67,166,1.794,176,3.172,177,3.172,178,3.577,179,3.632,180,3.915,182,2.1,183,3.632,185,3.172,186,2.299,187,1.935,188,1.794,189,2.299,190,2.299,191,2.299,192,3.974,291,2.299,481,2.547,482,3.515,483,2.88,484,3.385,485,3.385,486,3.385]],["title/classes/UniqueConstraintError.html",[21,0.011,487,2.654]],["body/classes/UniqueConstraintError.html",[3,0.301,4,0.269,5,0.269,11,0.022,12,0.883,16,0.675,20,0.301,21,0.012,26,0.017,27,0.017,73,1.424,74,1.263,75,0.732,76,1.122,117,1.864,128,2.273,145,2.107,150,2.467,170,3.6,171,1.424,173,2.106,223,2.992,298,1.961,487,3.916,488,4.427,489,4.427,490,5.204,491,4.631,492,3.976,493,3.976,494,3.382,495,5.204,496,3.382,497,3.976,498,3.976,499,3.976,500,3.976]],["title/classes/UpdatePostDto.html",[21,0.011,413,2.189]],["body/classes/UpdatePostDto.html",[3,0.354,4,0.316,5,0.316,11,0.022,16,0.749,20,0.354,21,0.015,26,0.018,27,0.018,117,2.066,171,1.674,194,2.672,196,3.517,391,2.672,413,3.579,423,3.517,501,3.976,502,5.768,503,3.976,504,3.517,505,3.517]],["title/classes/UpdateUserDto.html",[21,0.011,506,2.189]],["body/classes/UpdateUserDto.html",[3,0.354,4,0.316,5,0.316,11,0.022,16,0.749,20,0.354,21,0.015,26,0.018,27,0.018,117,2.066,171,1.674,218,2.672,220,3.517,391,2.672,503,3.976,504,3.517,505,3.517,506,3.579,507,3.976,508,5.768,509,3.517]],["title/classes/User.html",[21,0.011,121,1.74]],["body/classes/User.html",[3,0.294,4,0.262,5,0.262,7,0.542,11,0.022,12,1.354,15,2.195,16,0.503,20,0.294,21,0.012,26,0.016,27,0.016,74,1.822,75,1.122,76,1.721,92,2.827,93,3.037,119,2.21,121,2.526,141,2.055,171,1.389,188,2.713,201,2.641,210,2.713,298,1.913,510,3.3,511,3.879,512,3.879,513,3.879,514,3.879,515,3.879]],["title/interfaces/UserPayload.html",[113,1.869,148,2.189]],["body/interfaces/UserPayload.html",[3,0.344,4,0.307,5,0.307,7,0.635,11,0.022,15,2.083,20,0.344,26,0.018,27,0.018,75,1.043,113,2.406,115,3.084,119,2.445,148,3.515,154,5.501,156,5.501,210,3.272,516,3.863]],["title/interfaces/UserToken.html",[113,1.869,146,2.395]],["body/interfaces/UserToken.html",[3,0.362,4,0.323,5,0.323,7,0.669,11,0.022,15,2.132,20,0.362,26,0.019,27,0.019,75,0.881,113,2.536,115,3.25,119,2.526,146,3.974,158,5.604,517,4.072]],["title/controllers/UsersController.html",[0,1.625,518,2.395]],["body/controllers/UsersController.html",[0,1.122,2,1.122,3,0.184,4,0.165,5,0.165,7,0.341,8,1.17,10,2.619,11,0.023,12,1.18,14,1.687,15,2.061,16,0.689,17,0.541,20,0.184,21,0.008,22,1.392,23,1.201,24,1.571,26,0.012,27,0.012,73,1.771,74,1.571,75,0.91,76,1.396,77,2.769,78,2.072,79,2.072,80,2.188,86,1.833,87,1.654,132,2.188,201,2.573,218,3.192,389,2.072,391,2.104,392,3.358,393,2.769,396,2.499,397,2.499,401,1.833,402,3.131,409,1.654,410,2.072,412,1.654,414,3.131,416,2.072,417,2.072,418,1.833,422,1.654,424,1.654,427,2.072,431,2.072,433,2.072,436,2.072,506,3.704,509,2.769,518,2.499,519,2.072,520,2.435,521,2.435,522,2.435,523,2.435,524,2.435,525,2.435,526,2.435,527,2.435,528,2.435,529,2.072,530,2.435,531,2.435,532,2.435,533,2.435,534,2.435,535,2.435,536,2.435,537,2.435]],["title/modules/UsersModule.html",[28,1.428,43,2.016]],["body/modules/UsersModule.html",[2,2.231,3,0.27,4,0.241,5,0.241,11,0.022,16,0.765,17,0.793,20,0.27,21,0.011,26,0.015,27,0.015,28,2.225,30,1.759,31,1.759,32,2.039,33,2.039,34,1.759,35,3.141,36,3.141,43,3.832,44,2.767,45,2.039,46,2.039,132,3.4,440,2.928,443,2.422,518,3.732,529,3.035,538,3.035,539,3.035,540,3.035,541,3.567,542,3.567]],["title/injectables/UsersService.html",[60,0.692,132,1.74]],["body/injectables/UsersService.html",[3,0.149,4,0.133,5,0.133,7,0.274,8,0.989,11,0.023,12,1.191,14,1.625,15,1.305,16,0.664,17,0.436,20,0.149,21,0.006,22,1.122,23,0.968,24,1.625,26,0.01,27,0.01,60,0.611,61,0.747,73,1.831,74,1.625,75,0.941,76,1.443,92,1.536,93,1.65,121,0.968,125,3.719,128,1.122,132,1.536,136,4.136,140,2.343,141,1.04,150,2.401,151,2.343,164,1.477,201,2.356,210,3.034,218,2.518,298,1.909,391,1.78,392,2.992,396,2.114,397,2.114,409,2.114,412,2.114,422,1.333,424,1.333,440,2.03,443,1.333,445,1.67,447,2.649,449,4.35,456,3.748,506,2.733,509,2.343,543,1.67,544,3.113,545,3.113,546,1.962,547,1.962,548,1.962,549,3.113,550,1.962,551,3.113,552,1.962,553,1.962,554,1.962,555,3.113,556,1.962,557,1.962,558,1.962,559,3.113,560,1.962,561,1.962,562,1.962,563,1.962,564,1.962]],["title/coverage.html",[565,3.615]],["body/coverage.html",[0,2.112,1,1.431,5,0.142,6,1.793,11,0.022,18,1.205,21,0.019,26,0.011,27,0.011,34,1.04,56,1.431,60,1.197,62,1.793,66,1.431,67,1.793,70,1.431,75,0.388,80,1.04,82,1.205,84,1.586,98,1.308,113,2.148,114,1.431,116,1.793,121,1.04,124,1.793,132,1.04,143,1.308,146,1.431,148,1.308,166,1.117,170,1.308,172,1.586,173,2.634,174,1.586,175,1.793,194,1.205,195,1.793,196,2.478,218,1.205,219,1.793,220,2.478,284,1.431,285,1.793,286,1.586,287,1.793,292,1.586,293,1.586,294,1.586,296,1.586,297,1.586,298,1.04,303,1.793,323,1.586,343,1.431,350,1.793,368,1.793,371,1.431,372,1.793,373,1.586,374,1.793,375,1.793,380,1.793,387,1.431,388,1.793,413,1.308,420,1.205,440,0.971,444,1.793,473,1.793,481,1.586,482,1.586,483,1.793,487,1.586,488,1.793,489,1.793,501,1.793,506,1.308,507,1.793,510,1.793,516,1.793,517,1.793,518,1.431,519,1.793,543,1.793,565,1.586,566,2.107,567,2.107,568,2.107,569,7.001,570,5.99,571,2.107,572,4.972,573,2.802,574,4.583,575,6.103,576,1.793,577,2.107,578,2.107,579,3.293,580,4.054,581,2.107,582,2.107,583,2.107,584,1.793,585,1.793,586,2.107,587,2.107]],["title/dependencies.html",[31,2.091,588,2.51]],["body/dependencies.html",[11,0.023,17,0.888,21,0.016,26,0.017,27,0.017,31,1.971,55,3.006,87,2.713,103,2.713,105,3.006,122,3.399,140,3.006,141,2.117,187,2.284,216,2.713,358,4.948,359,3.399,504,3.006,505,3.006,589,5.816,590,3.995,591,3.995,592,3.995,593,3.995,594,3.995,595,3.995,596,3.995,597,3.995,598,3.995,599,3.995,600,3.995,601,3.995,602,3.995,603,3.995,604,3.995,605,3.995,606,3.995]],["title/miscellaneous/enumerations.html",[607,1.455,608,3.607]],["body/miscellaneous/enumerations.html",[7,0.721,11,0.021,26,0.02,27,0.02,335,3.88,607,2.544,608,4.387,609,6.122,610,5.157,611,5.157,612,5.157,613,5.157]],["title/miscellaneous/functions.html",[607,1.455,614,3.607]],["body/miscellaneous/functions.html",[7,0.735,11,0.02,26,0.02,27,0.02,34,3.247,576,4.474,607,2.594,614,4.474,615,5.259]],["title/index.html",[7,0.413,616,2.95,617,2.95]],["body/index.html",[4,0.226,11,0.022,26,0.015,27,0.015,243,4.52,458,2.515,565,2.515,618,3.343,619,3.343,620,4.63,621,3.343,622,3.343,623,3.343,624,3.343,625,3.343,626,3.343,627,2.844,628,5.312,629,3.343,630,3.343,631,3.343,632,3.343,633,6.388,634,3.343,635,3.343,636,3.343,637,6.23,638,3.343,639,3.343,640,4.63,641,3.343,642,3.343,643,3.343,644,3.343,645,4.63,646,4.63,647,3.343,648,3.343,649,3.343,650,4.63,651,4.63,652,3.343,653,3.343,654,3.343,655,3.343,656,3.343,657,2.844,658,3.343,659,3.343,660,3.343,661,3.343,662,3.343,663,3.343,664,3.343,665,3.343,666,3.343,667,3.343,668,3.343,669,3.343,670,3.343,671,3.343,672,3.343,673,3.343,674,2.844]],["title/modules.html",[30,2.37]],["body/modules.html",[11,0.018,26,0.018,27,0.018,29,3.193,30,2.319,40,2.917,41,2.917,42,2.917,43,2.687,657,5.719,675,6.722,676,6.722,677,6.722]],["title/overview.html",[678,4.087]],["body/overview.html",[2,1.394,11,0.022,18,2.877,26,0.014,27,0.014,28,1.225,29,4.55,30,1.493,31,1.493,32,1.73,33,1.73,34,1.493,35,1.73,36,1.73,37,2.575,38,2.575,39,2.575,40,4.009,41,3.853,42,3.744,43,3.694,44,2.468,45,1.73,46,1.73,61,1.152,82,2.877,95,2.575,96,2.575,98,3.123,115,2.055,132,3.063,171,1.084,420,2.877,438,2.575,439,2.575,440,2.978,467,2.575,468,2.575,538,2.575,539,2.575,540,2.575,678,2.575,679,3.026,680,3.026,681,3.026,682,3.026,683,3.026]],["title/properties.html",[119,1.83,588,2.51]],["body/properties.html",[11,0.022,26,0.02,27,0.02,119,2.225,458,3.88,627,4.387,674,4.387,684,5.157,685,5.157,686,5.157]],["title/miscellaneous/typealiases.html",[607,1.455,687,4.24]],["body/miscellaneous/typealiases.html",[7,0.69,11,0.019,26,0.019,27,0.019,75,0.908,173,3.159,320,4.486,491,4.486,494,5.072,607,2.434,688,4.934,689,4.934,690,4.934,691,4.934,692,4.934,693,4.934,694,4.934]],["title/miscellaneous/variables.html",[607,1.455,695,3.607]],["body/miscellaneous/variables.html",[7,0.445,11,0.023,15,1.995,24,1.644,26,0.014,27,0.014,75,0.586,84,3.367,145,1.289,164,2.395,166,2.371,213,2.161,223,3.367,292,3.367,293,2.395,294,3.367,296,3.367,297,2.395,298,2.207,323,3.367,326,2.708,330,2.161,332,5.219,335,4.224,491,3.367,496,2.708,573,2.708,584,3.807,585,3.807,607,1.57,695,2.708,696,3.183,697,4.475,698,3.183,699,5.915,700,3.183,701,4.475,702,3.183,703,3.183,704,3.183,705,3.183,706,3.183,707,3.183,708,4.475,709,3.183,710,3.183,711,3.183,712,3.183]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":685,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":558,"title":{},"body":{"injectables/UsersService.html":{}}}],["10.0.0",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":681,"title":{},"body":{"overview.html":{}}}],["12",{"_index":682,"title":{},"body":{"overview.html":{}}}],["123@abc",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["3",{"_index":683,"title":{},"body":{"overview.html":{}}}],["3/5",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["30d",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["4",{"_index":680,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":679,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["5.10.2",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["7.3.0",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserToken.html":{}}}],["address",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":688,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":499,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["amazing",{"_index":658,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('post",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('user",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":635,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":626,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["apra",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["array.isarray(e.meta.target",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt.auth.guard",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":66,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":312,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":304,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":458,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authoremail",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["authorid",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["authrequest",{"_index":114,"title":{"interfaces/AuthRequest.html":{}},"body":{"interfaces/AuthRequest.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":659,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":290,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["badrequestexception(error.message",{"_index":302,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["bcrypt",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(dto.password",{"_index":557,"title":{},"body":{"injectables/UsersService.html":{}}}],["body",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["boolean(user",{"_index":349,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":677,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":675,"title":{},"body":{"modules.html":{}}}],["building",{"_index":621,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":180,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["canactivate",{"_index":305,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":309,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["case",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catcherror",{"_index":186,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["catcherror((error",{"_index":190,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["class",{"_index":21,"title":{"classes/ConflictError.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"classes/Post.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":171,"title":{},"body":{"classes/ConflictError.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"classes/Post.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["client",{"_index":494,"title":{},"body":{"classes/UniqueConstraintError.html":{},"miscellaneous/typealiases.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":438,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":439,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":467,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":468,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":469,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_usersmodule",{"_index":538,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":539,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":540,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coisa",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["com",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["conectada",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["conectar",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["conflict",{"_index":493,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["conflicterror",{"_index":170,"title":{"classes/ConflictError.html":{}},"body":{"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["conflictexception",{"_index":184,"title":{},"body":{"injectables/ConflictInterceptor.html":{}}}],["conflictexception(error.message",{"_index":193,"title":{},"body":{"injectables/ConflictInterceptor.html":{}}}],["conflictinterceptor",{"_index":174,"title":{"injectables/ConflictInterceptor.html":{}},"body":{"injectables/ConflictInterceptor.html":{},"coverage.html":{}}}],["connect",{"_index":459,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(error",{"_index":192,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["const",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PostsService.html":{},"classes/UniqueConstraintError.html":{},"injectables/UsersService.html":{}}}],["constraint",{"_index":489,"title":{},"body":{"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["constructor",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"classes/UniqueConstraintError.html":{},"injectables/UsersService.html":{}}}],["constructor(e",{"_index":490,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["constructor(jwtservice",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(prisma",{"_index":445,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":306,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["content",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["context",{"_index":182,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["context.getclass",{"_index":329,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":328,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":337,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('posts",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":565,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":391,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["create(createpostdto",{"_index":398,"title":{},"body":{"controllers/PostsController.html":{}}}],["create(createuserdto",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(dto",{"_index":447,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createduser",{"_index":559,"title":{},"body":{"injectables/UsersService.html":{}}}],["createpostdto",{"_index":194,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":218,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["da",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["data",{"_index":456,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":294,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseerror",{"_index":284,"title":{"classes/DatabaseError.html":{}},"body":{"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"coverage.html":{}}}],["databaseerror(e.message",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseinterceptor",{"_index":286,"title":{"injectables/DatabaseInterceptor.html":{}},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{}}}],["de",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginRequestBody.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":418,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":410,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":627,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":636,"title":{},"body":{"index.html":{}}}],["diretamente",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["documentation",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":449,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["dto.authoremail",{"_index":455,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto/create",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UniqueConstraintError.html":{},"miscellaneous/variables.html":{}}}],["e.clientversion",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.code",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.meta",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.meta.target",{"_index":496,"title":{},"body":{"classes/UniqueConstraintError.html":{},"miscellaneous/variables.html":{}}}],["e.meta.target.every((item",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":647,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":622,"title":{},"body":{"index.html":{}}}],["email",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["email@email.com",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["entities/post.entity",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["entities/user.entity",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enumerations",{"_index":608,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"miscellaneous/variables.html":{}}}],["error('user",{"_index":342,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error.ts",{"_index":173,"title":{},"body":{"classes/ConflictError.html":{},"classes/DatabaseError.html":{},"classes/NotFoundError.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["error.ts:4",{"_index":492,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["error.util",{"_index":299,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["error.util.ts",{"_index":585,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors.util",{"_index":295,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["errors.util.ts",{"_index":584,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors/database",{"_index":289,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["errors/not",{"_index":378,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["errors/unauthorized",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["estiver",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["etc",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["example",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["executioncontext",{"_index":178,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["exibir",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exists",{"_index":500,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["expiresin",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":122,"title":{},"body":{"interfaces/AuthRequest.html":{},"dependencies.html":{}}}],["extends",{"_index":117,"title":{},"body":{"interfaces/AuthRequest.html":{},"classes/ConflictError.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NotFoundError.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":392,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyemail",{"_index":544,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":549,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":545,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":551,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":393,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["findone(@param('id",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":401,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["found",{"_index":343,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["found.interceptor.ts",{"_index":375,"title":{},"body":{"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["found.interceptor.ts:14",{"_index":376,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["framework",{"_index":620,"title":{},"body":{"index.html":{}}}],["function",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":614,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":402,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get('feed",{"_index":404,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpublishedposts",{"_index":394,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getting",{"_index":616,"title":{"index.html":{}},"body":{}}],["global",{"_index":471,"title":{},"body":{"modules/PrismaModule.html":{}}}],["grow",{"_index":654,"title":{},"body":{"index.html":{}}}],["handledatabaseerrors",{"_index":292,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handledatabaseerrors(error",{"_index":301,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["hello",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":665,"title":{},"body":{"index.html":{}}}],["home",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["httpcode",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":671,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":188,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/User.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["include",{"_index":461,"title":{},"body":{"injectables/PostsService.html":{}}}],["incorrect",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["informar",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["informações",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["inherited",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["inject",{"_index":311,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["inject(usersservice",{"_index":324,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["injectable",{"_index":60,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":61,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":632,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":634,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":191,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["intercept",{"_index":176,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["intercept(context",{"_index":177,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["interface",{"_index":113,"title":{"interfaces/AuthRequest.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{}},"body":{"interfaces/AuthRequest.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"coverage.html":{}}}],["interfaces",{"_index":115,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"overview.html":{}}}],["is_public_key",{"_index":323,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["isoptional",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ispasswordvalid",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprismaerror",{"_index":296,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isprismaerror(error",{"_index":300,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["ispublic",{"_index":326,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["isstring()@isoptional",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@minlength(4)@maxlength(20)@matches(/((?=.*\\d)|(?=.+\\w+))(?![.\\n])(?=.*[a",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["item",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":661,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":56,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":98,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":668,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":674,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":651,"title":{},"body":{"index.html":{}}}],["local",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["login(@body",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginrequestbody",{"_index":70,"title":{"classes/LoginRequestBody.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"coverage.html":{}}}],["mail",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["map",{"_index":313,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["map((req",{"_index":340,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["map((user",{"_index":348,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mas",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["matches(/((?=.*\\d)|(?=.+\\w+))(?![.\\n])(?=.*[a",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["maxlength(20",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["mergemap",{"_index":314,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mergemap((request",{"_index":338,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mergemap((userfromjwt",{"_index":344,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mergemap((value",{"_index":334,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mesmo",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["metadata",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["minlength(4",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["miscellaneous",{"_index":607,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":650,"title":{},"body":{"index.html":{}}}],["mode",{"_index":640,"title":{},"body":{"index.html":{}}}],["model/authrequest",{"_index":322,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["model/loginrequestbody",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["model/userfromjwt",{"_index":321,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["model/userpayload",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["model/usertoken",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["models",{"_index":319,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":664,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":669,"title":{},"body":{"index.html":{}}}],["name",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["necessariamente",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["necessário",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["nest",{"_index":628,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":673,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":185,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":504,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":179,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["next.handle().pipe",{"_index":189,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["node.js",{"_index":619,"title":{},"body":{"index.html":{}}}],["nome",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["notfounderror",{"_index":371,"title":{"classes/NotFoundError.html":{}},"body":{"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["notfoundexception",{"_index":377,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["notfoundexception(error.message",{"_index":379,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["notfoundinterceptor",{"_index":373,"title":{"injectables/NotFoundInterceptor.html":{}},"body":{"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["npm",{"_index":633,"title":{},"body":{"index.html":{}}}],["number",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["não",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["o",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["object",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":183,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["of(canactivate).pipe",{"_index":333,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["of(request).pipe",{"_index":339,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["onmoduledestroy",{"_index":475,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":476,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":652,"title":{},"body":{"index.html":{}}}],["optional",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":678,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":613,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["package",{"_index":588,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["para",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["param",{"_index":417,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":694,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":503,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpostdto",{"_index":502,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createuserdto",{"_index":508,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginRequestBody.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":416,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":414,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["paulo",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["payload",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perfil",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pessoa",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["please",{"_index":662,"title":{},"body":{"index.html":{}}}],["possível",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["post",{"_index":80,"title":{"classes/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('login",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:13",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:10",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:4",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:6",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:7",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:8",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":390,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":442,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":387,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":420,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["precisa",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["precise",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["prefix",{"_index":389,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["principal",{"_index":120,"title":{},"body":{"interfaces/AuthRequest.html":{}}}],["prisma",{"_index":298,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma.postcreateinput",{"_index":457,"title":{},"body":{"injectables/PostsService.html":{}}}],["prisma.postuncheckedcreateinput",{"_index":386,"title":{},"body":{"classes/Post.html":{}}}],["prisma.postupdateinput",{"_index":464,"title":{},"body":{"injectables/PostsService.html":{}}}],["prisma.service",{"_index":472,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":556,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":515,"title":{},"body":{"classes/User.html":{}}}],["prisma.userupdateinput",{"_index":562,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/client",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":474,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclienterror",{"_index":491,"title":{},"body":{"classes/UniqueConstraintError.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["prismaclientknownrequesterror",{"_index":692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prismaerrors",{"_index":609,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prismaerrors.uniqueconstraintfail",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":42,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":440,"title":{"injectables/PrismaService.html":{}},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["process.env.jwt_secret",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":642,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":618,"title":{},"body":{"index.html":{}}}],["project",{"_index":653,"title":{},"body":{"index.html":{}}}],["promise",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":119,"title":{"properties.html":{}},"body":{"interfaces/AuthRequest.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{},"classes/Post.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"properties.html":{}}}],["provide",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('login')@httpcode(httpstatus.ok",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["published",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["publishpost",{"_index":395,"title":{},"body":{"controllers/PostsController.html":{}}}],["publishpost(@param('id",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["publishpost(id",{"_index":406,"title":{},"body":{"controllers/PostsController.html":{}}}],["put",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('publish/:id",{"_index":407,"title":{},"body":{"controllers/PostsController.html":{}}}],["qualquer",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["que",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["read",{"_index":663,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":498,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["rede",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["redes",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["reflect",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":307,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["remove",{"_index":396,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":409,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":631,"title":{},"body":{"index.html":{}}}],["req.user",{"_index":341,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request",{"_index":118,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/JwtAuthGuard.html":{}}}],["request.principal",{"_index":347,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":637,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":187,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":291,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["salvatore",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["scalable",{"_index":623,"title":{},"body":{"index.html":{}}}],["secret",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sem",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["senha",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ser",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["server",{"_index":624,"title":{},"body":{"index.html":{}}}],["services",{"_index":317,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["setmetadata(is_public_key",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":625,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["sociais",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["social",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":656,"title":{},"body":{"index.html":{}}}],["src/.../handle",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":615,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma",{"_index":689,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../prisma.errors.ts",{"_index":610,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../userfromjwt.ts",{"_index":690,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.auth.guard.ts",{"_index":303,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.auth.guard.ts:23",{"_index":308,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/jwt.auth.guard.ts:31",{"_index":310,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":350,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/model/authrequest.ts",{"_index":116,"title":{},"body":{"interfaces/AuthRequest.html":{},"coverage.html":{}}}],["src/auth/model/loginrequestbody.ts",{"_index":368,"title":{},"body":{"classes/LoginRequestBody.html":{},"coverage.html":{}}}],["src/auth/model/loginrequestbody.ts:11",{"_index":369,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/model/loginrequestbody.ts:19",{"_index":370,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/model/userfromjwt.ts",{"_index":693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/auth/model/userpayload.ts",{"_index":516,"title":{},"body":{"interfaces/UserPayload.html":{},"coverage.html":{}}}],["src/auth/model/usertoken.ts",{"_index":517,"title":{},"body":{"interfaces/UserToken.html":{},"coverage.html":{}}}],["src/auth/public.decorator.ts",{"_index":573,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/errors/conflict",{"_index":172,"title":{},"body":{"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"coverage.html":{}}}],["src/errors/database",{"_index":285,"title":{},"body":{"classes/DatabaseError.html":{},"coverage.html":{}}}],["src/errors/not",{"_index":372,"title":{},"body":{"classes/NotFoundError.html":{},"coverage.html":{}}}],["src/errors/prisma",{"_index":691,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/errors/unauthorized",{"_index":481,"title":{},"body":{"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["src/errors/unique",{"_index":488,"title":{},"body":{"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["src/interceptors/conflict.interceptor.ts",{"_index":175,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/conflict.interceptor.ts:13",{"_index":181,"title":{},"body":{"injectables/ConflictInterceptor.html":{}}}],["src/interceptors/database.interceptor.ts",{"_index":287,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/database.interceptor.ts:16",{"_index":288,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["src/interceptors/entity",{"_index":374,"title":{},"body":{"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/unauthorized.interceptor.ts",{"_index":483,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/unauthorized.interceptor.ts:14",{"_index":484,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{}}}],["src/main.ts",{"_index":576,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dto/create",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":501,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts",{"_index":380,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts:4",{"_index":383,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:5",{"_index":385,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:6",{"_index":382,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:7",{"_index":384,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:8",{"_index":381,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":388,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:22",{"_index":399,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:27",{"_index":400,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:32",{"_index":405,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":403,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:42",{"_index":415,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":408,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:52",{"_index":411,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":441,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":444,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:11",{"_index":448,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:33",{"_index":450,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:41",{"_index":452,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:49",{"_index":451,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:58",{"_index":454,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:69",{"_index":453,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:8",{"_index":446,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/prisma/prisma.errors.ts",{"_index":611,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/prisma/prisma.module.ts",{"_index":470,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":443,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":473,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:13",{"_index":477,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:9",{"_index":478,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/users/dto/create",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":507,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":123,"title":{},"body":{"interfaces/AuthRequest.html":{}}}],["src/users/entities/user.entity.ts",{"_index":510,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:4",{"_index":512,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:5",{"_index":511,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:6",{"_index":514,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:7",{"_index":513,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:23",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:28",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:33",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:38",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":541,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":543,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":552,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":550,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":547,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":548,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":554,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":553,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":546,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/handle",{"_index":293,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/is",{"_index":297,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":638,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":641,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":643,"title":{},"body":{"index.html":{}}}],["started",{"_index":617,"title":{"index.html":{}},"body":{}}],["starter",{"_index":630,"title":{},"body":{"index.html":{}}}],["statements",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":666,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserPayload.html":{}}}],["super",{"_index":325,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super(`a",{"_index":497,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["super.canactivate(context",{"_index":331,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":657,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":676,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["takewhile",{"_index":315,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["takewhile((value",{"_index":336,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["tap",{"_index":316,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["tap((user",{"_index":346,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["test",{"_index":646,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":649,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":648,"title":{},"body":{"index.html":{}}}],["tests",{"_index":645,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":655,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":479,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":480,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(email",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.sign(payload",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findone(+id",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpublishedposts",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.remove(+id",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(+id",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prisma.post.create",{"_index":460,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.delete",{"_index":466,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.findmany",{"_index":462,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.finduniqueorthrow",{"_index":463,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.update",{"_index":465,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.user.create",{"_index":560,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.delete",{"_index":564,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":561,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":555,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":563,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":327,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.userservice.findbyemail(email",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(+id",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(userfromjwt.id",{"_index":345,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.usersservice.remove(+id",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateuser(email",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["title",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["touch",{"_index":667,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":330,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":672,"title":{},"body":{"index.html":{}}}],["type",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":687,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":332,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":505,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":629,"title":{},"body":{"index.html":{}}}],["uma",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unauthorizederror",{"_index":143,"title":{"classes/UnauthorizedError.html":{}},"body":{"injectables/AuthService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["unauthorizedexception",{"_index":485,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{}}}],["unauthorizedexception(error.message",{"_index":486,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{}}}],["unauthorizedinterceptor",{"_index":482,"title":{"injectables/UnauthorizedInterceptor.html":{}},"body":{"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["undefined",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["uniqueconstrainterror",{"_index":487,"title":{"classes/UniqueConstraintError.html":{}},"body":{"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["uniqueconstrainterror(e",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uniqueconstraintfail",{"_index":612,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uniquefield",{"_index":495,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["unit",{"_index":644,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{}}}],["unlicensed",{"_index":686,"title":{},"body":{"properties.html":{}}}],["update",{"_index":397,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":412,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatepostdto",{"_index":413,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":506,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usando",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["useclass",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":121,"title":{"classes/User.html":{}},"body":{"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":509,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.email",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["user:17",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user:30",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user:38",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user:4",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userfromjwt",{"_index":320,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["username",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserPayload.html":{}}}],["userpayload",{"_index":148,"title":{"interfaces/UserPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["users",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":542,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":318,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["userscontroller",{"_index":518,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":43,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":132,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertoken",{"_index":146,"title":{"interfaces/UserToken.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserToken.html":{},"coverage.html":{}}}],["utilizado",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":352,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{},"dependencies.html":{}}}],["value",{"_index":335,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":695,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":684,"title":{},"body":{"properties.html":{}}}],["void",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":639,"title":{},"body":{"index.html":{}}}],["weak",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["website",{"_index":670,"title":{},"body":{"index.html":{}}}],["world",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":660,"title":{},"body":{"index.html":{}}}],["z",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["z])(?=.*[a",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtAuthGuard } from './auth/jwt.auth.guard';\n\n@Module({\n  imports: [UsersModule, PostsModule, PrismaModule, AuthModule],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: LoginRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            LoginRequestBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { LoginRequestBody } from './model/LoginRequestBody';\nimport { AuthService } from './auth.service';\nimport { Public } from './public.decorator';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  login(@Body() { email, password }: LoginRequestBody) {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '30d' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthRequest.html":{"url":"interfaces/AuthRequest.html","title":"interface - AuthRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/AuthRequest.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            principal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        principal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        principal:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from 'src/users/entities/user.entity';\n\nexport interface AuthRequest extends Request {\n  principal: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '@prisma/client';\n\nimport { UsersService } from 'src/users/users.service';\n\nimport { UnauthorizedError } from '../errors/unauthorized-error';\n\nimport { UserToken } from './model/UserToken';\nimport { UserPayload } from './model/UserPayload';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UsersService,\n  ) {}\n\n  async login(email: string, password: string): Promise {\n    const user: User = await this.validateUser(email, password);\n\n    const payload: UserPayload = {\n      username: user.email,\n      sub: user.id,\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  private async validateUser(email: string, password: string) {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n\n      if (isPasswordValid) {\n        return {\n          ...user,\n          password: undefined,\n        };\n      }\n    }\n\n    throw new UnauthorizedError(\n      'Email address or password provided is incorrect.',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConflictError.html":{"url":"classes/ConflictError.html","title":"class - ConflictError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConflictError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/conflict-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ConflictError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConflictInterceptor.html":{"url":"injectables/ConflictInterceptor.html","title":"injectable - ConflictInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConflictInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/conflict.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/conflict.interceptor.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ConflictException,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { ConflictError } from 'src/errors/conflict-error';\n\n@Injectable()\nexport class ConflictInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof ConflictError) {\n          console.log(error, 'ConflictError');\n          throw new ConflictException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Post\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorEmail\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                published\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, IsString } from 'class-validator';\nimport { Post } from '../entities/post.entity';\n\nexport class CreatePostDto extends Post {\n  @IsString()\n  title: string;\n\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @IsEmail()\n  authorEmail: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:38\n\n                        \n                    \n\n            \n                \n                    O e-mail é necessário apra o login, mas não necessariamente precisa ser o mesmo e-mail da\nrede social que estiver conectada. Login sem rede social precisa de uma senha.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:17\n\n                        \n                    \n\n            \n                \n                    O nome será utilizado para qualquer coisa (Perfil, Home Page, etc) que precise exibir\ninformações da pessoa conectada.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:30\n\n                        \n                    \n\n            \n                \n                    É possível conectar com redes sociais sem uma senha, mas para login usando o e-mail diretamente\né necessário informar uma senha.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserDto extends User {\n  /**\n   * O nome será utilizado para qualquer coisa (Perfil, Home Page, etc) que precise exibir\n   * informações da pessoa conectada.\n   * @example \"Paulo Salvatore\"\n   */\n  @IsString()\n  name: string;\n\n  /**\n   * É possível conectar com redes sociais sem uma senha, mas para login usando o e-mail diretamente\n   * é necessário informar uma senha.\n   * @example 123@abc\n   */\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {\n    message: 'password too weak',\n  })\n  password: string;\n\n  /**\n   * O e-mail é necessário apra o login, mas não necessariamente precisa ser o mesmo e-mail da\n   * rede social que estiver conectada. Login sem rede social precisa de uma senha.\n   * @example email@email.com\n   */\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseError.html":{"url":"classes/DatabaseError.html","title":"class - DatabaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/database-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DatabaseError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseInterceptor.html":{"url":"injectables/DatabaseInterceptor.html","title":"injectable - DatabaseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/database.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/database.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DatabaseError } from './../errors/database-error';\nimport {\n  BadRequestException,\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { handleDatabaseErrors } from 'src/utils/handle-database-errors.util';\nimport { isPrismaError } from 'src/utils/is-prisma-error.util';\n\n@Injectable()\nexport class DatabaseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (isPrismaError(error)) {\n          error = handleDatabaseErrors(error);\n        }\n\n        if (error instanceof DatabaseError) {\n          throw new BadRequestException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.auth.guard.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.auth.guard.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Inject, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n// Password\nimport { AuthGuard } from '@nestjs/passport';\n\n// RxJs\nimport { of } from 'rxjs';\nimport { map, mergeMap, takeWhile, tap } from 'rxjs/operators';\n\n// Services\nimport { UsersService } from '../users/users.service';\n\n// Models\nimport { UserFromJwt } from './model/UserFromJwt';\nimport { AuthRequest } from './model/AuthRequest';\n\n// Decorators\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    private reflector: Reflector,\n    @Inject(UsersService) private readonly usersService: UsersService,\n  ) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    const canActivate = super.canActivate(context);\n\n    if (typeof canActivate === 'boolean') {\n      return canActivate;\n    }\n\n    return of(canActivate).pipe(\n      mergeMap((value) => value),\n      takeWhile((value) => value),\n      map(() => context.switchToHttp().getRequest()),\n      mergeMap((request) =>\n        of(request).pipe(\n          map((req) => {\n            if (!req.user) {\n              throw Error('User was not found in request.');\n            }\n\n            return req.user;\n          }),\n          mergeMap((userFromJwt: UserFromJwt) =>\n            this.usersService.findById(userFromJwt.id),\n          ),\n          tap((user) => {\n            request.principal = user;\n          }),\n        ),\n      ),\n      map((user) => Boolean(user)),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: UserPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UserFromJwt } from './model/UserFromJwt';\nimport { UserPayload } from './model/UserPayload';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: UserPayload): Promise {\n    return { id: payload.sub, email: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginRequestBody.html":{"url":"classes/LoginRequestBody.html","title":"class - LoginRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/LoginRequestBody.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/model/LoginRequestBody.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/model/LoginRequestBody.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class LoginRequestBody {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {\n    message: 'password too weak',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundError.html":{"url":"classes/NotFoundError.html","title":"class - NotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/not-found-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NotFoundError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotFoundInterceptor.html":{"url":"injectables/NotFoundInterceptor.html","title":"injectable - NotFoundInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotFoundInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/entity-not-found.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/entity-not-found.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NotFoundError } from '../errors/not-found-error';\n\n@Injectable()\nexport class NotFoundInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof NotFoundError) {\n          throw new NotFoundException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                published\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\nexport class Post implements Prisma.PostUncheckedCreateInput {\n  id?: number;\n  title: string;\n  content?: string;\n  published?: boolean;\n  authorId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    \n                                publishPost\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishPost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('publish/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePostDto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePostDto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('post')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Post()\n  create(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.postsService.findAll();\n  }\n\n  @Get('feed')\n  async getPublishedPosts() {\n    return this.postsService.getPublishedPosts();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.postsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updatePostDto: UpdatePostDto) {\n    return this.postsService.update(+id, updatePostDto);\n  }\n\n  @Put('publish/:id')\n  publishPost(@Param('id') id: string) {\n    return this.postsService.update(+id, { published: true });\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.postsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPostsModule -->\n\nPrismaService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService, PrismaService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreatePostDto): Promise {\n    const { authorEmail } = dto;\n\n    delete dto.authorEmail;\n\n    const data: Prisma.PostCreateInput = {\n      ...dto,\n      author: {\n        connect: {\n          email: authorEmail,\n        },\n      },\n    };\n\n    return this.prisma.post.create({\n      data,\n      include: {\n        author: true,\n      },\n    });\n  }\n\n  async findAll(): Promise {\n    return this.prisma.post.findMany({\n      include: {\n        author: true,\n      },\n    });\n  }\n\n  async getPublishedPosts(): Promise {\n    return this.prisma.post.findMany({\n      where: {\n        published: true,\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    return this.prisma.post.findUniqueOrThrow({\n      where: { id },\n      include: {\n        author: true,\n      },\n    });\n  }\n\n  async update(id: number, dto: UpdatePostDto): Promise {\n    const data: Prisma.PostUpdateInput = {\n      ...dto,\n    };\n\n    return this.prisma.post.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.prisma.post.delete({\n      where: { id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedError.html":{"url":"classes/UnauthorizedError.html","title":"class - UnauthorizedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/unauthorized-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UnauthorizedError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnauthorizedInterceptor.html":{"url":"injectables/UnauthorizedInterceptor.html","title":"injectable - UnauthorizedInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UnauthorizedInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/unauthorized.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/unauthorized.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UnauthorizedError } from 'src/errors/unauthorized-error';\n\n@Injectable()\nexport class UnauthorizedInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        console.log(error, 'UnauthorizedError');\n        if (error instanceof UnauthorizedError) {\n          console.log(error, 'UnauthorizedError');\n          throw new UnauthorizedException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UniqueConstraintError.html":{"url":"classes/UniqueConstraintError.html","title":"class - UniqueConstraintError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UniqueConstraintError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/unique-constraint-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ConflictError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(e: PrismaClientError)\n                    \n                \n                        \n                            \n                                Defined in src/errors/unique-constraint-error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        e\n                                                  \n                                                        \n                                                                        PrismaClientError\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictError } from './conflict-error';\nimport { PrismaClientError } from './prisma-client-error';\n\nexport class UniqueConstraintError extends ConflictError {\n  constructor(e: PrismaClientError) {\n    const uniqueField = e.meta.target;\n\n    super(`A record with this ${uniqueField} already exists`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePostDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\nexport class User implements Prisma.UserUncheckedCreateInput {\n  id?: number;\n  email: string;\n  password: string;\n  name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPayload.html":{"url":"interfaces/UserPayload.html","title":"interface - UserPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/UserPayload.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserPayload {\n  username: string;\n  sub: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserToken.html":{"url":"interfaces/UserToken.html","title":"interface - UserToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/UserToken.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserToken {\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('user')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findById(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string) {\n    this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, PrismaService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async findById(id: number): Promise {\n    return this.prisma.user.findUnique({ where: { id } });\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.prisma.user.findUnique({ where: { email } });\n  }\n\n  async create(dto: CreateUserDto): Promise {\n    const data: Prisma.UserCreateInput = {\n      ...dto,\n      password: await bcrypt.hash(dto.password, 10),\n    };\n\n    const createdUser = await this.prisma.user.create({\n      data,\n    });\n\n    return {\n      ...createdUser,\n      password: undefined,\n    };\n  }\n\n  async findAll(): Promise {\n    return this.prisma.user.findMany();\n  }\n\n  async update(id: number, dto: UpdateUserDto): Promise {\n    const data: Prisma.UserUpdateInput = {\n      ...dto,\n    };\n\n    return this.prisma.user.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.prisma.user.delete({\n      where: { id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/model/AuthRequest.ts\n            \n            interface\n            AuthRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/model/LoginRequestBody.ts\n            \n            class\n            LoginRequestBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/model/UserPayload.ts\n            \n            interface\n            UserPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/model/UserToken.ts\n            \n            interface\n            UserToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/conflict-error.ts\n            \n            class\n            ConflictError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/database-error.ts\n            \n            class\n            DatabaseError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/not-found-error.ts\n            \n            class\n            NotFoundError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/unauthorized-error.ts\n            \n            class\n            UnauthorizedError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/unique-constraint-error.ts\n            \n            class\n            UniqueConstraintError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/conflict.interceptor.ts\n            \n            injectable\n            ConflictInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/database.interceptor.ts\n            \n            injectable\n            DatabaseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/entity-not-found.interceptor.ts\n            \n            injectable\n            NotFoundInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/unauthorized.interceptor.ts\n            \n            injectable\n            UnauthorizedInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/entities/post.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/handle-database-errors.util.ts\n            \n            variable\n            handleDatabaseErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/is-prisma-error.util.ts\n            \n            variable\n            isPrismaError\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @prisma/client : ^5.10.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PrismaErrors   (src/.../prisma.errors.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/prisma/prisma.errors.ts\n    \n        \n            \n                \n                    \n                        \n                        PrismaErrors\n                    \n                \n                        \n                            \n                                 UniqueConstraintFail\n                            \n                        \n                        \n                            \n                                Value : P2002\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPostsModule -->\n\nPrismaService->PostsModule\n\n\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PrismaClientError   (src/.../prisma-client-error.ts)\n                        \n                        \n                            UserFromJwt   (src/.../UserFromJwt.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/errors/prisma-client-error.ts\n    \n    \n        \n            \n                \n                    \n                    PrismaClientError\n                \n            \n            \n                \n                        PrismaClientKnownRequestError\n\n                \n            \n        \n    \n    src/auth/model/UserFromJwt.ts\n    \n    \n        \n            \n                \n                    \n                    UserFromJwt\n                \n            \n            \n                \n                            Partial\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            handleDatabaseErrors   (src/.../handle-database-errors.util.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            isPrismaError   (src/.../is-prisma-error.util.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/handle-database-errors.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleDatabaseErrors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (e: PrismaClientError): Error => {\n  switch (e.code) {\n    case PrismaErrors.UniqueConstraintFail:\n      return new UniqueConstraintError(e);\n\n    default:\n      return new DatabaseError(e.message);\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/utils/is-prisma-error.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isPrismaError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (e: PrismaClientError): boolean => {\n  return (\n    typeof e.code === 'string' &&\n    typeof e.clientVersion === 'string' &&\n    (typeof e.meta === 'undefined' ||\n      (typeof e.meta === 'object' &&\n        (typeof e.meta.target === 'string' ||\n          (Array.isArray(e.meta.target) &&\n            e.meta.target.every((item) => typeof item === 'string')))))\n  );\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
