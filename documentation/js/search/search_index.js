var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.706,1,2.484]],["body/controllers/AppController.html",[0,2.638,1,3.84,2,2.079,3,0.408,4,0.339,5,0.273,6,3.77,7,0.687,8,1.851,9,5.529,10,2.22,11,0.021,12,0.986,13,4.418,14,1.458,15,1.958,16,0.816,17,1.044,18,3.568,19,3.77,20,0.408,21,0.066,22,2.56,23,2.22,24,1.458,25,4.418,26,0.016,27,0.016]],["title/modules/AppModule.html",[28,1.508,29,2.484]],["body/modules/AppModule.html",[1,3.555,2,2.103,3,0.291,4,0.242,5,0.195,11,0.022,16,0.963,17,0.745,18,3.588,19,2.691,20,0.291,21,0.047,26,0.013,27,0.013,28,2.158,29,4.765,30,1.584,31,1.484,32,1.827,33,1.827,34,1.584,35,3.008,36,1.827,37,2.691,38,2.691,39,2.691,40,3.884,41,3.884,42,3.884,43,3.588,44,2.589,45,1.827,46,1.698,47,3.153,48,3.814,49,3.153,50,3.153,51,3.153,52,3.153,53,3.153,54,4.469,55,2.387,56,3.061,57,3.153,58,3.153,59,3.153]],["title/injectables/AppService.html",[18,2.101,60,0.764]],["body/injectables/AppService.html",[3,0.431,4,0.358,5,0.288,7,0.725,8,1.915,9,5.638,11,0.021,12,1.042,14,1.54,15,2.026,16,0.679,17,1.102,18,3.362,20,0.431,21,0.07,24,1.54,26,0.017,27,0.017,60,1.223,61,1.828,62,3.982,63,4.666,64,4.666,65,3.982]],["title/controllers/AuthController.html",[0,1.706,66,2.484]],["body/controllers/AuthController.html",[0,2.382,2,1.778,3,0.349,4,0.29,5,0.234,7,0.587,8,1.672,10,1.899,11,0.022,12,0.844,14,1.247,16,0.926,17,0.893,20,0.349,21,0.057,22,2.189,23,1.899,24,1.247,26,0.015,27,0.015,66,3.468,67,3.225,68,3.833,69,3.779,70,4.178,71,3.779,72,3.779,73,1.32,74,1.247,75,0.751,76,1.116,77,2.588,78,3.225,79,3.225,80,1.899,81,3.779,82,3.308,83,3.225,84,3.468,85,3.225,86,2.86,87,2.588,88,3.779,89,3.779,90,3.779,91,3.779,92,1.778,93,2.726,94,3.779]],["title/modules/AuthModule.html",[28,1.508,40,2.275]],["body/modules/AuthModule.html",[2,2.222,3,0.315,4,0.262,5,0.211,11,0.022,16,0.947,17,0.806,20,0.315,21,0.051,26,0.014,27,0.014,28,2.252,30,1.714,31,1.606,32,1.977,33,1.977,34,1.714,35,3.139,36,1.977,40,4.278,43,3.679,44,2.737,45,1.977,46,1.837,48,4.031,66,3.71,82,3.679,83,2.912,95,2.912,96,2.912,97,3.412,98,3.983,99,3.412,100,3.412,101,3.412,102,4.723,103,2.337,104,3.412,105,2.583,106,3.412,107,3.412,108,3.412,109,2.912,110,3.412,111,3.412,112,3.412]],["title/interfaces/AuthRequest.html",[113,1.822,114,2.484]],["body/interfaces/AuthRequest.html",[3,0.427,4,0.354,5,0.286,7,0.718,11,0.021,16,0.839,20,0.427,26,0.017,27,0.017,75,0.918,113,2.321,114,3.949,115,3.163,116,3.942,117,2.132,118,4.758,119,2.547,120,6.583,121,3.308,122,3.942,123,4.619]],["title/injectables/AuthService.html",[60,0.764,82,2.101]],["body/injectables/AuthService.html",[3,0.235,4,0.195,5,0.157,7,0.396,8,1.263,11,0.022,12,1.025,14,1.263,15,2.294,16,0.892,17,0.602,20,0.235,21,0.038,23,1.922,24,1.263,26,0.011,27,0.011,60,0.806,61,0.998,68,2.895,73,1.604,74,1.516,75,0.913,76,1.356,82,2.216,92,2.161,93,3.375,105,1.928,121,2.886,124,2.174,125,3.328,126,4.14,127,3.824,128,2.216,129,2.547,130,5.744,131,4.592,132,2.564,133,2.547,134,3.824,135,2.547,136,2.619,137,3.824,138,2.547,139,2.174,140,2.895,141,1.371,142,2.547,143,2.399,144,2.547,145,1.059,146,1.744,147,2.547,148,2.399,149,2.174,150,3.202,151,3.476,152,2.547,153,2.174,154,2.174,155,2.547,156,1.744,157,2.547,158,2.174,159,2.547,160,2.547,161,3.824,162,2.547,163,2.547,164,1.928,165,1.476,166,1.199,167,2.174,168,2.547,169,2.547]],["title/classes/ConflictError.html",[21,0.054,170,2.275]],["body/classes/ConflictError.html",[3,0.48,4,0.399,5,0.321,11,0.019,20,0.48,21,0.078,26,0.018,27,0.018,117,2.291,145,2.576,170,3.886,171,1.921,172,3.933,173,2.797]],["title/injectables/ConflictInterceptor.html",[60,0.764,174,2.745]],["body/injectables/ConflictInterceptor.html",[3,0.342,4,0.284,5,0.229,7,0.575,8,1.649,11,0.022,12,0.826,14,1.222,16,0.823,17,0.875,20,0.342,21,0.056,24,1.222,26,0.015,27,0.015,60,1.053,61,1.451,73,1.293,74,1.222,75,0.736,76,1.093,145,2.349,165,2.894,166,1.742,170,3.545,172,2.802,174,3.78,175,3.16,176,3.42,177,3.42,178,3.795,179,3.87,180,4.143,181,3.702,182,2.322,183,3.87,184,3.702,185,3.42,186,2.536,187,2.145,188,1.993,189,2.536,190,2.536,191,2.536,192,3.16,193,3.702]],["title/classes/CreatePostDto.html",[21,0.054,194,2.101]],["body/classes/CreatePostDto.html",[3,0.31,4,0.257,5,0.207,7,0.521,10,2.695,11,0.021,12,1.409,15,2.205,16,0.679,20,0.31,21,0.07,26,0.014,27,0.014,75,1.255,76,1.951,80,3.319,117,1.724,119,2.06,171,1.239,194,2.702,195,3.98,196,2.536,197,4.578,198,4.06,199,4.578,200,3.98,201,2.194,202,3.194,203,4.06,204,3.35,205,3.35,206,5.204,207,3.35,208,4.39,209,3.35,210,2.51,211,3.35,212,3.35,213,2.294,214,3.35,215,4.663,216,2.294,217,3.35]],["title/classes/CreateUserDto.html",[21,0.054,218,2.101]],["body/classes/CreateUserDto.html",[3,0.194,4,0.161,5,0.13,7,0.326,10,2.044,11,0.021,12,1.029,15,1.857,16,0.479,20,0.194,21,0.049,26,0.01,27,0.01,68,4.024,74,1.343,75,0.916,76,0.973,92,1.914,93,2.696,117,1.218,119,1.455,121,2.793,171,0.775,201,1.55,203,3.079,206,3.933,208,3.489,210,1.129,216,1.436,218,1.908,219,1.79,220,1.588,221,2.097,222,6.06,223,3.641,224,4.537,225,4.609,226,3.294,227,4.609,228,3.294,229,3.294,230,4.609,231,4.609,232,3.294,233,4.609,234,4.609,235,3.933,236,4.609,237,3.294,238,4.609,239,4.609,240,3.294,241,5.316,242,5.316,243,3.641,244,2.097,245,3.294,246,3.294,247,4.609,248,3.294,249,3.294,250,3.294,251,3.294,252,3.294,253,3.294,254,3.294,255,3.294,256,3.294,257,3.294,258,1.79,259,2.811,260,2.811,261,2.811,262,2.811,263,2.097,264,3.294,265,3.294,266,3.294,267,3.294,268,3.294,269,3.294,270,3.294,271,3.294,272,2.097,273,1.79,274,1.79,275,1.79,276,2.097,277,2.097,278,2.097,279,2.097,280,1.79,281,1.79,282,1.79,283,2.097]],["title/classes/DatabaseError.html",[21,0.054,284,2.484]],["body/classes/DatabaseError.html",[3,0.48,4,0.399,5,0.321,11,0.019,20,0.48,21,0.078,26,0.018,27,0.018,117,2.291,145,2.576,171,1.921,173,2.797,284,4.243,285,4.435]],["title/injectables/DatabaseInterceptor.html",[60,0.764,286,2.745]],["body/injectables/DatabaseInterceptor.html",[3,0.314,4,0.261,5,0.21,7,0.528,8,1.555,11,0.022,12,0.759,14,1.122,16,0.923,17,0.803,20,0.314,21,0.051,24,1.122,26,0.014,27,0.014,60,0.993,61,1.332,73,1.187,74,1.122,75,0.676,76,1.004,145,2.427,165,2.73,166,1.6,176,3.226,177,3.226,178,3.662,179,3.703,180,3.998,182,2.133,183,3.703,185,3.226,186,2.328,187,1.97,188,1.83,189,2.328,190,2.328,191,2.328,284,3.226,286,3.566,287,2.901,288,3.399,289,3.399,290,3.399,291,2.328,292,2.573,293,2.573,294,2.573,295,3.399,296,2.573,297,2.573,298,1.708,299,3.399,300,3.399,301,3.399,302,3.399]],["title/injectables/JwtAuthGuard.html",[56,2.484,60,0.764]],["body/injectables/JwtAuthGuard.html",[3,0.237,4,0.197,5,0.158,7,0.398,8,1.268,10,1.287,11,0.022,12,0.857,14,0.846,16,0.914,17,0.605,20,0.237,21,0.038,23,1.287,24,1.69,26,0.011,27,0.011,55,1.939,56,2.63,60,0.809,61,1.004,73,1.341,74,1.268,75,0.764,76,1.134,85,2.186,93,1.379,103,1.754,114,1.754,117,1.42,118,1.939,121,1.287,126,2.907,128,2.225,132,2.999,150,2.409,165,1.484,178,3.211,182,1.607,187,2.225,213,1.754,291,1.754,303,2.186,304,3.84,305,5.483,306,2.561,307,5.756,308,2.561,309,3.84,310,2.561,311,2.561,312,2.561,313,3.84,314,2.561,315,2.561,316,2.561,317,2.561,318,2.561,319,2.561,320,2.907,321,2.186,322,2.561,323,1.939,324,2.561,325,2.186,326,3.278,327,2.561,328,2.561,329,2.561,330,1.754,331,2.561,332,2.186,333,2.561,334,2.561,335,2.907,336,2.561,337,2.561,338,2.561,339,2.561,340,2.561,341,3.84,342,2.561,343,1.754,344,2.561,345,2.561,346,2.561,347,2.561,348,2.561,349,2.561]],["title/injectables/JwtStrategy.html",[60,0.764,98,2.275]],["body/injectables/JwtStrategy.html",[3,0.334,4,0.277,5,0.223,7,0.562,8,1.622,11,0.022,12,1.097,14,1.193,16,0.912,17,0.854,20,0.334,21,0.054,24,1.193,26,0.014,27,0.014,60,1.036,61,1.416,73,1.262,74,1.193,75,0.719,76,1.067,92,1.701,98,3.082,103,2.475,109,3.085,117,1.817,125,3.234,128,3.234,136,3.365,148,3.758,149,3.085,153,3.085,201,1.701,320,2.736,321,3.085,325,3.085,350,3.085,351,4.913,352,4.913,353,3.614,354,4.913,355,3.614,356,3.614,357,3.614,358,3.085,359,3.085,360,3.614,361,3.614,362,3.614,363,3.614,364,3.614,365,3.614,366,3.614,367,3.614]],["title/classes/LoginRequestBody.html",[21,0.054,70,2.484]],["body/classes/LoginRequestBody.html",[3,0.374,4,0.31,5,0.25,7,0.629,10,2.662,11,0.021,12,1.183,15,2.189,16,0.589,20,0.374,21,0.08,26,0.016,27,0.016,70,3.628,75,1.053,92,2.779,93,3.502,119,2.341,171,1.496,203,4.471,208,4.01,216,2.771,258,3.453,259,4.521,260,4.521,261,4.521,262,4.521,273,3.453,274,3.453,275,3.453,280,3.453,281,3.453,282,3.453,368,3.453,369,4.046,370,4.046]],["title/classes/NotFoundError.html",[21,0.054,371,2.484]],["body/classes/NotFoundError.html",[3,0.478,4,0.396,5,0.319,11,0.019,20,0.478,21,0.078,26,0.018,27,0.018,117,2.283,145,2.567,171,1.91,173,2.781,343,3.538,371,4.229,372,4.41]],["title/injectables/NotFoundInterceptor.html",[60,0.764,373,2.745]],["body/injectables/NotFoundInterceptor.html",[3,0.335,4,0.278,5,0.224,7,0.564,8,1.626,11,0.022,12,0.81,14,1.198,16,0.873,17,0.857,20,0.335,21,0.055,24,1.198,26,0.014,27,0.014,60,1.038,61,1.422,73,1.267,74,1.198,75,0.721,76,1.072,145,2.326,165,2.855,166,1.708,176,3.374,177,3.374,178,3.764,179,3.831,180,4.109,182,2.276,183,3.831,185,3.374,186,2.485,187,2.103,188,1.954,189,2.485,190,2.485,191,2.485,291,2.485,343,2.485,371,3.374,373,3.729,374,4.205,375,3.097,376,3.629,377,3.629,378,3.629,379,3.629]],["title/classes/Post.html",[21,0.054,80,1.822]],["body/classes/Post.html",[3,0.358,4,0.297,5,0.24,7,0.602,11,0.021,12,1.432,15,2.152,16,0.564,20,0.358,21,0.058,26,0.015,27,0.015,75,1.275,76,2.018,80,2.587,119,2.275,141,2.086,171,1.433,188,2.772,198,4.377,199,4.935,200,4.935,201,2.721,202,3.96,210,3.317,213,3.526,298,1.947,380,3.307,381,3.875,382,3.875,383,3.875,384,3.875,385,3.875,386,3.875]],["title/controllers/PostsController.html",[0,1.706,387,2.484]],["body/controllers/PostsController.html",[0,1.095,2,1.095,3,0.215,4,0.179,5,0.144,7,0.362,8,1.179,10,2.902,11,0.022,12,1.289,14,1.907,15,2.249,16,0.765,17,0.55,20,0.215,21,0.035,22,1.348,23,1.169,24,1.907,26,0.011,27,0.011,73,1.836,74,1.735,75,1.045,76,1.552,77,2.445,80,2.183,86,1.761,87,1.594,125,2.517,139,1.986,194,3.214,201,2.804,202,1.594,330,1.594,387,2.445,388,1.986,389,1.986,390,2.327,391,1.794,392,3.337,393,2.703,394,4.159,395,3.57,396,2.069,397,2.069,398,2.327,399,2.327,400,2.327,401,1.761,402,3.047,403,2.327,404,3.57,405,2.327,406,2.327,407,3.57,408,2.327,409,1.594,410,3.047,411,2.327,412,1.594,413,3.738,414,3.047,415,2.327,416,1.986,417,1.986,418,1.761,419,2.327,420,2.517,421,1.986,422,1.594,423,2.703,424,1.594,425,2.327,426,2.327,427,1.986,428,2.327,429,2.327,430,2.327,431,1.986,432,2.327,433,1.986,434,3.57,435,2.327,436,1.986,437,2.327]],["title/modules/PostsModule.html",[28,1.508,41,2.275]],["body/modules/PostsModule.html",[2,2.464,3,0.368,4,0.305,5,0.246,11,0.021,16,0.906,17,0.939,20,0.368,21,0.06,26,0.015,27,0.015,28,2.435,30,1.998,31,1.871,32,2.304,33,2.304,34,1.998,35,3.393,36,2.304,41,4.311,44,3.034,45,2.304,46,2.14,387,4.011,420,3.848,421,3.393,438,3.393,439,3.393,440,3.125,441,3.976,442,3.976,443,2.723]],["title/injectables/PostsService.html",[60,0.764,420,2.101]],["body/injectables/PostsService.html",[3,0.196,4,0.163,5,0.131,7,0.33,8,1.097,11,0.022,12,1.247,14,1.764,16,0.733,17,0.501,20,0.196,21,0.032,22,1.229,23,1.066,24,1.764,26,0.01,27,0.01,60,0.701,61,0.831,73,1.759,74,1.663,75,1.001,76,1.487,80,1.066,92,0.998,125,3.88,128,1.229,136,4.313,141,1.142,150,2.571,194,2.687,197,2.837,201,2.514,202,1.453,210,3.2,298,2.059,330,3.176,391,1.67,392,3.176,393,2.516,394,3.958,396,1.926,397,1.926,401,2.516,409,2.276,412,2.276,413,2.909,418,1.606,420,1.926,422,1.453,423,2.516,424,1.453,440,2.182,443,1.453,444,1.811,445,1.811,446,2.122,447,2.837,448,2.122,449,4.766,450,2.122,451,2.122,452,2.122,453,2.122,454,2.122,455,2.122,456,3.958,457,2.122,458,3.511,459,2.122,460,2.122,461,3.497,462,3.324,463,2.122,464,2.122,465,2.122,466,2.122]],["title/modules/PrismaModule.html",[28,1.508,42,2.275]],["body/modules/PrismaModule.html",[3,0.383,4,0.317,5,0.256,11,0.021,16,0.782,17,0.978,20,0.383,21,0.062,26,0.016,27,0.016,28,2.482,30,2.079,31,1.947,32,2.397,33,2.397,34,2.079,35,3.46,36,3.46,42,4.289,44,3.115,45,2.397,46,2.228,440,3.369,467,3.532,468,4.138,469,3.532,470,4.138,471,5.376,472,4.138]],["title/injectables/PrismaService.html",[60,0.764,440,1.706]],["body/injectables/PrismaService.html",[3,0.376,4,0.312,5,0.251,7,0.632,8,1.754,11,0.021,12,1.186,14,1.754,16,0.773,17,0.96,20,0.376,21,0.061,26,0.016,27,0.016,60,1.12,61,1.593,117,1.965,125,3.872,141,2.188,151,4.022,188,2.188,440,2.5,473,3.469,474,5.919,475,6.682,476,6.682,477,4.064,478,4.064,479,4.064,480,4.064]],["title/classes/UnauthorizedError.html",[21,0.054,143,2.275]],["body/classes/UnauthorizedError.html",[3,0.48,4,0.399,5,0.321,11,0.019,20,0.48,21,0.078,26,0.018,27,0.018,117,2.291,143,3.886,145,2.576,171,1.921,173,2.797,481,3.933]],["title/injectables/UnauthorizedInterceptor.html",[60,0.764,482,2.745]],["body/injectables/UnauthorizedInterceptor.html",[3,0.334,4,0.277,5,0.223,7,0.562,8,1.622,11,0.022,12,0.807,14,1.193,16,0.872,17,0.854,20,0.334,21,0.054,24,1.193,26,0.014,27,0.014,60,1.036,61,1.416,73,1.262,74,1.193,75,0.719,76,1.067,143,3.758,145,2.321,165,2.847,166,1.701,176,3.365,177,3.365,178,3.758,179,3.823,180,4.102,182,2.267,183,3.823,185,3.365,186,2.475,187,2.094,188,1.946,189,2.475,190,2.475,191,2.475,192,4.193,291,2.475,481,2.736,482,3.719,483,3.085,484,3.614,485,3.614,486,3.614]],["title/classes/UniqueConstraintError.html",[21,0.054,487,2.745]],["body/classes/UniqueConstraintError.html",[3,0.388,4,0.322,5,0.259,11,0.021,12,0.936,16,0.789,20,0.388,21,0.063,26,0.016,27,0.016,73,1.465,74,1.385,75,0.834,76,1.239,117,2.005,128,2.43,145,2.255,150,2.631,170,3.77,171,1.551,173,2.258,223,2.873,298,2.108,487,4.105,488,4.629,489,4.629,490,5.423,491,4.81,492,4.195,493,4.195,494,3.58,495,5.423,496,3.58,497,4.195,498,4.195,499,4.195,500,4.195]],["title/classes/UpdatePostDto.html",[21,0.054,413,2.275]],["body/classes/UpdatePostDto.html",[3,0.45,4,0.373,5,0.301,11,0.021,16,0.866,20,0.45,21,0.073,26,0.018,27,0.018,117,2.201,171,1.799,194,2.818,196,3.682,391,2.444,413,3.735,423,3.682,501,4.152,502,5.953,503,4.152,504,3.682,505,3.682]],["title/classes/UpdateUserDto.html",[21,0.054,506,2.275]],["body/classes/UpdateUserDto.html",[3,0.45,4,0.373,5,0.301,11,0.021,16,0.866,20,0.45,21,0.073,26,0.018,27,0.018,117,2.201,171,1.799,218,2.818,220,3.682,391,2.444,503,4.152,504,3.682,505,3.682,506,3.735,507,4.152,508,5.953,509,3.682]],["title/classes/User.html",[21,0.054,121,1.822]],["body/classes/User.html",[3,0.379,4,0.315,5,0.253,7,0.637,11,0.021,12,1.406,15,2.339,16,0.597,20,0.379,21,0.062,26,0.016,27,0.016,74,1.963,75,1.252,76,1.86,92,2.798,93,3.201,119,2.361,121,2.685,141,2.208,171,1.516,188,2.877,201,2.798,210,2.877,298,2.06,510,3.5,511,4.101,512,4.101,513,4.101,514,4.101,515,4.101]],["title/interfaces/UserPayload.html",[113,1.822,148,2.275]],["body/interfaces/UserPayload.html",[3,0.438,4,0.364,5,0.293,7,0.737,11,0.02,15,2.221,20,0.438,26,0.017,27,0.017,75,1.165,113,2.381,115,3.245,119,2.588,148,3.675,154,5.669,156,4.549,210,3.423,516,4.044]],["title/interfaces/UserToken.html",[113,1.822,146,2.484]],["body/interfaces/UserToken.html",[3,0.459,4,0.381,5,0.307,7,0.773,11,0.02,15,2.268,20,0.459,26,0.018,27,0.018,75,0.988,113,2.497,115,3.404,119,2.665,146,4.131,158,5.763,517,4.242]],["title/controllers/UsersController.html",[0,1.706,518,2.484]],["body/controllers/UsersController.html",[0,1.247,2,1.247,3,0.245,4,0.203,5,0.164,7,0.412,8,1.301,10,2.795,11,0.022,12,1.242,14,1.837,15,2.213,16,0.81,17,0.626,20,0.245,21,0.04,22,1.536,23,1.332,24,1.719,26,0.012,27,0.012,73,1.818,74,1.719,75,1.035,76,1.537,77,2.698,78,2.262,79,2.262,80,2.363,86,2.006,87,1.815,132,2.363,201,2.743,218,3.378,389,2.262,391,1.979,392,3.565,393,2.982,396,2.283,397,2.283,401,2.006,402,3.362,409,1.815,410,2.262,412,1.815,414,3.362,416,2.262,417,2.262,418,2.006,422,1.815,424,1.815,427,2.262,431,2.262,433,2.262,436,2.262,506,3.891,509,2.982,518,2.698,519,2.262,520,2.651,521,2.651,522,2.651,523,2.651,524,2.651,525,2.651,526,2.651,527,2.651,528,2.651,529,2.262,530,2.651,531,2.651,532,2.651,533,2.651,534,2.651,535,2.651,536,2.651,537,2.651]],["title/modules/UsersModule.html",[28,1.508,43,2.101]],["body/modules/UsersModule.html",[2,2.389,3,0.351,4,0.291,5,0.235,11,0.021,16,0.889,17,0.897,20,0.351,21,0.057,26,0.015,27,0.015,28,2.379,30,1.907,31,1.785,32,2.198,33,2.198,34,1.907,35,3.315,36,3.315,43,3.991,44,2.942,45,2.198,46,2.043,132,3.552,440,3.084,443,2.599,518,3.919,529,3.238,538,3.238,539,3.238,540,3.238,541,3.794,542,3.794]],["title/injectables/UsersService.html",[60,0.764,132,1.822]],["body/injectables/UsersService.html",[3,0.199,4,0.165,5,0.133,7,0.335,8,1.111,11,0.022,12,1.254,14,1.776,15,1.446,16,0.783,17,0.51,20,0.199,21,0.032,22,1.25,23,1.084,24,1.776,26,0.01,27,0.01,60,0.71,61,0.845,73,1.878,74,1.776,75,1.069,76,1.588,92,1.584,93,1.812,121,1.084,125,3.891,128,1.25,132,1.692,136,4.33,140,2.548,141,1.161,150,2.598,151,2.548,164,1.632,201,2.531,210,3.216,218,2.711,298,2.081,391,1.692,392,3.205,396,1.951,397,1.951,409,2.306,412,2.306,422,1.477,424,1.477,440,2.202,443,1.477,445,1.841,447,2.873,449,4.59,456,3.994,506,2.935,509,2.548,543,1.841,544,3.367,545,3.367,546,2.157,547,2.157,548,2.157,549,3.367,550,2.157,551,3.367,552,2.157,553,2.157,554,2.157,555,3.367,556,2.157,557,2.157,558,1.841,559,3.367,560,2.157,561,2.157,562,2.157,563,2.157,564,2.157]],["title/changelog.html",[565,2.082,566,2.082,567,2.595]],["body/changelog.html",[4,0.245,5,0.296,11,0.012,26,0.007,27,0.007,46,0.794,65,1.259,156,2.189,166,1.164,243,1.694,391,0.741,396,1.433,397,1.433,558,2.727,567,5.114,568,2.474,569,3.557,570,2.832,571,1.475,572,2.727,573,2.474,574,3.196,575,1.475,576,1.475,577,2.111,578,3.741,579,1.259,580,1.475,581,3.196,582,1.259,583,5.401,584,1.475,585,1.259,586,1.475,587,2.832,588,1.475,589,3.741,590,1.475,591,1.475,592,1.475,593,1.475,594,5.797,595,1.475,596,2.727,597,1.475,598,1.475,599,2.474,600,1.475,601,1.475,602,2.474,603,2.474,604,3.196,605,2.474,606,1.475,607,2.474,608,6.528,609,1.475,610,1.475,611,1.475,612,1.475,613,2.474,614,1.475,615,2.474,616,1.475,617,2.474,618,1.475,619,2.474,620,1.475,621,1.475,622,1.475,623,1.475,624,1.475,625,1.475,626,1.475,627,2.474,628,2.474,629,1.475,630,1.475,631,1.475,632,1.475,633,1.475,634,1.475,635,1.475,636,1.475,637,1.475,638,1.475,639,1.475,640,1.475,641,4.511,642,2.727,643,1.259,644,1.475,645,3.557,646,5.029,647,1.475,648,2.474,649,1.475,650,1.475,651,1.475,652,2.474,653,1.475,654,1.475,655,1.475,656,1.475,657,3.196,658,3.196,659,2.474,660,2.474,661,2.474,662,1.475,663,1.475,664,1.475,665,1.475,666,1.475,667,3.196,668,3.196,669,2.474,670,1.259,671,2.474,672,2.474,673,1.259,674,1.475,675,2.474,676,1.259,677,1.475,678,2.474,679,4.292,680,4.511,681,1.475,682,2.474,683,1.475,684,2.111,685,1.475,686,4.168,687,2.727,688,1.259,689,1.475,690,1.475,691,1.475,692,1.475,693,2.474,694,1.475,695,1.259,696,1.475,697,1.475,698,2.419,699,1.475,700,1.259,701,1.475,702,1.475,703,1.475,704,1.475,705,1.475,706,1.475,707,1.475,708,1.259,709,1.475,710,1.475,711,2.474,712,1.475,713,1.475,714,1.475,715,3.741,716,1.475,717,1.475,718,1.259,719,1.475,720,1.475,721,1.475,722,1.475,723,1.475,724,1.475,725,2.474,726,1.475,727,1.475,728,2.474,729,1.475,730,1.475,731,1.475,732,1.475,733,1.475,734,1.259,735,1.475,736,2.474,737,1.475,738,1.475,739,1.475,740,1.475,741,1.475,742,1.475,743,4.511,744,1.475,745,2.474,746,1.475,747,3.196,748,3.196,749,1.475,750,2.474,751,1.475,752,1.475,753,1.475,754,1.259,755,1.475,756,1.475,757,1.475,758,1.475,759,2.474,760,1.475,761,2.474,762,1.259,763,1.475,764,1.475,765,1.475,766,1.475,767,1.475,768,1.475,769,1.475,770,1.475,771,2.474,772,1.475,773,2.474,774,1.475,775,1.475,776,1.475,777,1.475,778,1.475,779,1.475,780,1.475,781,1.475,782,1.475,783,1.475,784,1.475,785,1.475,786,1.475,787,1.475,788,1.475,789,1.475,790,1.475,791,1.259,792,1.475,793,1.475,794,1.475,795,1.475,796,1.475,797,1.475,798,1.475,799,1.475,800,1.259,801,1.475,802,1.475,803,1.475,804,1.475,805,1.475,806,1.475,807,1.475,808,1.259,809,2.111,810,1.475,811,1.475,812,1.475,813,1.475,814,1.475,815,1.475]],["title/contributing.html",[565,2.082,566,2.082,816,2.595]],["body/contributing.html",[5,0.112,11,0.009,12,0.406,26,0.009,27,0.009,31,0.855,73,0.635,77,1.245,84,2.013,92,1.383,113,0.913,118,3.217,126,2.225,166,1.383,167,3.158,223,1.245,224,1.552,235,1.552,396,1.053,397,1.053,461,3.158,569,1.552,570,4.654,577,1.552,585,2.509,587,2.801,596,1.552,643,2.509,645,2.509,670,2.509,673,2.509,676,2.509,684,1.552,698,1.376,700,1.552,708,1.552,718,2.509,734,1.552,754,1.552,808,1.552,809,3.627,816,2.509,817,2.509,818,3.158,819,1.552,820,1.818,821,1.818,822,2.939,823,1.818,824,1.818,825,1.818,826,2.939,827,5.254,828,5.254,829,2.939,830,1.818,831,3.7,832,1.818,833,1.818,834,1.818,835,2.939,836,1.818,837,1.818,838,1.818,839,2.939,840,2.939,841,1.818,842,3.7,843,1.376,844,1.818,845,1.818,846,1.818,847,1.818,848,1.818,849,1.818,850,1.818,851,1.818,852,1.818,853,1.818,854,1.818,855,1.818,856,1.818,857,1.818,858,2.939,859,1.818,860,1.818,861,2.939,862,1.818,863,1.818,864,2.939,865,1.818,866,4.666,867,1.818,868,4.666,869,2.939,870,1.818,871,2.939,872,1.818,873,1.818,874,1.818,875,1.818,876,1.818,877,1.818,878,1.818,879,1.818,880,1.818,881,1.818,882,2.939,883,1.818,884,1.818,885,1.818,886,2.939,887,1.818,888,2.939,889,4.666,890,1.818,891,1.818,892,1.818,893,1.818,894,2.939,895,1.818,896,1.818,897,1.818,898,1.818,899,1.818,900,1.818,901,1.818,902,1.818,903,1.818,904,1.818,905,1.818,906,1.818,907,1.818,908,1.818,909,2.939,910,3.7,911,1.818,912,1.818,913,1.818,914,1.818,915,1.818,916,1.818,917,1.818,918,1.818,919,2.939,920,1.818,921,1.818,922,1.818,923,1.818,924,1.818,925,1.818,926,1.818,927,1.818,928,1.818,929,1.818,930,1.818,931,1.818,932,2.939,933,1.818,934,1.818,935,1.818,936,1.818,937,1.818,938,1.818,939,1.818,940,1.818,941,2.939,942,1.818,943,1.818,944,1.818,945,2.939,946,2.939,947,1.818,948,1.818,949,1.818,950,1.818,951,1.818,952,1.818,953,1.818,954,1.818,955,1.818,956,1.818,957,1.818,958,1.818,959,1.818,960,2.939,961,1.818,962,1.818,963,1.818,964,1.818,965,1.818,966,1.818,967,1.818,968,1.818,969,2.939,970,1.818,971,2.939,972,2.939,973,1.818,974,1.818,975,1.818,976,1.818,977,1.818,978,1.818,979,1.818,980,1.818,981,1.818,982,1.818,983,2.939,984,1.818,985,1.818,986,1.818,987,1.818,988,1.818,989,2.939,990,1.818,991,1.818,992,1.818,993,1.818,994,1.818,995,1.818,996,1.818,997,1.818,998,1.818,999,1.818,1000,1.818,1001,1.818,1002,1.818,1003,1.818,1004,1.818,1005,1.818,1006,1.818,1007,1.818,1008,1.818,1009,1.818,1010,1.818,1011,1.818,1012,1.818,1013,1.818,1014,1.818,1015,1.818,1016,1.818,1017,1.818,1018,1.818,1019,1.818,1020,1.818,1021,1.818,1022,1.818,1023,1.818]],["title/coverage.html",[1024,3.728]],["body/coverage.html",[0,2.284,1,1.581,5,0.143,6,1.971,11,0.021,18,1.338,21,0.097,26,0.01,27,0.01,34,1.16,56,1.581,60,1.335,62,1.971,66,1.581,67,1.971,70,1.581,75,0.459,80,1.16,82,1.338,84,1.581,98,1.449,113,2.173,114,1.581,116,1.971,121,1.16,124,1.971,132,1.16,143,1.449,146,1.581,148,1.449,166,1.087,170,1.449,172,1.748,173,2.82,174,1.748,175,1.971,194,1.338,195,1.971,196,2.687,218,1.338,219,1.971,220,2.687,284,1.581,285,1.971,286,1.748,287,1.971,292,1.748,293,1.748,294,1.748,296,1.748,297,1.748,298,1.16,303,1.971,323,1.748,343,1.581,350,1.971,368,1.971,371,1.581,372,1.971,373,1.748,374,1.971,375,1.971,380,1.971,387,1.581,388,1.971,413,1.449,420,1.338,440,1.087,444,1.971,473,1.971,481,1.748,482,1.748,483,1.971,487,1.748,488,1.971,489,1.971,501,1.971,506,1.449,507,1.971,510,1.971,516,1.971,517,1.971,518,1.581,519,1.971,543,1.971,762,1.971,1024,1.748,1025,2.309,1026,2.309,1027,2.309,1028,7.18,1029,6.225,1030,2.309,1031,5.238,1032,3.03,1033,4.853,1034,6.333,1035,1.971,1036,2.309,1037,3.55,1038,4.324,1039,2.309,1040,2.309,1041,2.309,1042,1.971,1043,1.971,1044,2.309,1045,2.309]],["title/dependencies.html",[31,2.049,1046,2.595]],["body/dependencies.html",[11,0.022,17,0.996,21,0.082,26,0.016,27,0.016,31,1.983,55,3.19,87,2.886,103,2.886,105,3.19,122,3.597,140,3.19,141,2.269,187,2.442,216,2.886,358,5.141,359,3.597,504,3.19,505,3.19,579,3.597,695,3.597,1047,6.023,1048,4.214,1049,4.214,1050,4.214,1051,4.214,1052,4.214,1053,4.214,1054,4.214,1055,4.214,1056,4.214,1057,4.214,1058,4.214,1059,4.214,1060,4.214,1061,4.214,1062,4.214]],["title/miscellaneous/enumerations.html",[1063,1.528,1064,3.717]],["body/miscellaneous/enumerations.html",[7,0.826,11,0.02,26,0.018,27,0.018,335,4.025,1063,2.671,1064,4.538,1065,6.28,1066,5.317,1067,5.317,1068,5.317,1069,5.317]],["title/miscellaneous/functions.html",[1063,1.528,1070,3.717]],["body/miscellaneous/functions.html",[7,0.841,11,0.019,26,0.019,27,0.019,34,3.383,1035,4.618,1063,2.719,1070,4.618,1071,5.411]],["title/index.html",[7,0.473,565,2.082,566,2.082]],["body/index.html",[4,0.274,11,0.021,26,0.014,27,0.014,243,3.8,458,2.704,570,2.704,642,3.049,698,2.704,817,3.049,818,3.049,1024,2.704,1072,3.572,1073,3.572,1074,4.874,1075,3.572,1076,3.572,1077,3.572,1078,3.572,1079,3.572,1080,3.572,1081,2.704,1082,5.548,1083,3.572,1084,3.572,1085,3.572,1086,6.59,1087,3.572,1088,3.572,1089,3.572,1090,6.439,1091,3.572,1092,4.874,1093,3.572,1094,3.572,1095,3.572,1096,3.572,1097,4.874,1098,4.874,1099,3.572,1100,3.572,1101,3.572,1102,4.874,1103,4.874,1104,3.572,1105,3.572,1106,3.572,1107,3.049,1108,3.572,1109,3.572,1110,3.572,1111,3.572,1112,3.572,1113,3.572,1114,3.572,1115,3.572,1116,3.572,1117,3.572,1118,3.572,1119,3.049,1120,3.572,1121,3.572,1122,3.572,1123,3.049]],["title/modules.html",[30,2.474]],["body/modules.html",[11,0.018,26,0.018,27,0.018,29,3.349,30,2.457,40,3.068,41,3.068,42,3.068,43,2.833,1107,5.878,1124,6.887,1125,6.887,1126,6.887]],["title/overview.html",[1127,4.203]],["body/overview.html",[2,1.531,11,0.021,18,3.06,26,0.013,27,0.013,28,1.353,29,4.719,30,1.635,31,1.531,32,1.886,33,1.886,34,1.635,35,1.886,36,1.886,37,2.777,38,2.777,39,2.777,40,4.181,41,4.03,42,3.924,43,3.862,44,2.648,45,1.886,46,1.752,61,1.275,82,3.06,95,2.777,96,2.777,98,3.313,115,2.229,132,3.228,171,1.203,420,3.06,438,2.777,439,2.777,440,3.136,467,2.777,469,2.777,538,2.777,539,2.777,540,2.777,687,2.777,1127,2.777,1128,3.254,1129,3.254,1130,3.254,1131,3.254]],["title/properties.html",[119,1.924,1046,2.595]],["body/properties.html",[11,0.021,26,0.018,27,0.018,119,2.349,458,4.025,587,4.025,791,4.538,1081,4.025,1123,4.538,1132,5.317]],["title/todo.html",[565,2.082,566,2.082,1133,2.595]],["body/todo.html",[5,0.284,11,0.018,26,0.017,27,0.017,156,3.147,198,3.479,243,3.936,391,2.309,572,3.922,582,3.922,679,3.922,688,3.922,800,3.922,819,3.922,1081,3.479,1119,3.922,1133,3.922,1134,6.271,1135,4.595,1136,4.595,1137,4.595,1138,5.747,1139,4.595,1140,4.595,1141,4.595,1142,4.595,1143,4.595,1144,4.595,1145,4.595,1146,4.595,1147,4.595,1148,4.595,1149,4.595,1150,4.595,1151,4.595,1152,4.595]],["title/miscellaneous/typealiases.html",[1063,1.528,1153,4.355]],["body/miscellaneous/typealiases.html",[7,0.794,11,0.018,26,0.018,27,0.018,75,1.016,173,3.302,320,4.642,491,4.642,494,5.234,1063,2.567,1154,5.109,1155,5.109,1156,5.109,1157,5.109,1158,5.109,1159,5.109,1160,5.109]],["title/miscellaneous/variables.html",[843,3.296,1063,1.528]],["body/miscellaneous/variables.html",[7,0.53,11,0.022,15,2.144,24,1.788,26,0.014,27,0.014,75,0.678,84,3.235,145,1.419,164,2.583,166,2.222,213,2.337,223,3.235,292,3.575,293,2.583,294,3.575,296,3.575,297,2.583,298,2.373,323,3.575,326,2.912,330,2.337,332,5.419,335,4.425,491,3.575,496,2.912,843,2.583,1032,2.912,1042,4.031,1043,4.031,1063,1.714,1161,3.412,1162,4.723,1163,3.412,1164,6.138,1165,3.412,1166,4.723,1167,3.412,1168,3.412,1169,3.412,1170,3.412,1171,3.412,1172,3.412,1173,4.723,1174,3.412,1175,3.412,1176,3.412,1177,3.412]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":791,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.0.2",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["0.0.4",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["0.0.5",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["0.0.6",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["0.0.7",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["0.0.8",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["0.14.1",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":695,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["0.3.0",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":688,"title":{},"body":{"changelog.html":{},"todo.html":{}}}],["05",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["1.0.0",{"_index":579,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.4",{"_index":1020,"title":{},"body":{"contributing.html":{}}}],["10",{"_index":558,"title":{},"body":{"injectables/UsersService.html":{},"changelog.html":{}}}],["10.0.0",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":1130,"title":{},"body":{"overview.html":{}}}],["12",{"_index":687,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["123@abc",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["16",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["1d",{"_index":1144,"title":{},"body":{"todo.html":{}}}],["20",{"_index":582,"title":{},"body":{"changelog.html":{},"todo.html":{}}}],["2014",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["2015",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":1142,"title":{},"body":{"todo.html":{}}}],["3",{"_index":1131,"title":{},"body":{"overview.html":{}}}],["3/5",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["30d",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["31",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["345",{"_index":1151,"title":{},"body":{"todo.html":{}}}],["3d",{"_index":1139,"title":{},"body":{"todo.html":{}}}],["4",{"_index":1129,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1128,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["5.10.2",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["7.3.0",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["8601",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["abusive",{"_index":984,"title":{},"body":{"contributing.html":{}}}],["acceptable",{"_index":938,"title":{},"body":{"contributing.html":{}}}],["accepting",{"_index":901,"title":{},"body":{"contributing.html":{}}}],["accesstoken",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserToken.html":{}}}],["account",{"_index":975,"title":{},"body":{"contributing.html":{}}}],["aciek",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["acting",{"_index":976,"title":{},"body":{"contributing.html":{}}}],["action",{"_index":944,"title":{},"body":{"contributing.html":{}}}],["adapted",{"_index":1018,"title":{},"body":{"contributing.html":{}}}],["added",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["address",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"contributing.html":{}}}],["adheres",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["advances",{"_index":916,"title":{},"body":{"contributing.html":{}}}],["against",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["age",{"_index":874,"title":{},"body":{"contributing.html":{}}}],["aishek",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["aliases",{"_index":1154,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aligned",{"_index":956,"title":{},"body":{"contributing.html":{}}}],["already",{"_index":499,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["amazing",{"_index":1108,"title":{},"body":{"index.html":{}}}],["amielucha",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["answer",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["answers",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["apitags",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('post",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('user",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1088,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appearance",{"_index":883,"title":{},"body":{"contributing.html":{}}}],["applications",{"_index":1080,"title":{},"body":{"index.html":{}}}],["applies",{"_index":967,"title":{},"body":{"contributing.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointed",{"_index":977,"title":{},"body":{"contributing.html":{}}}],["appropriate",{"_index":941,"title":{},"body":{"contributing.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["apra",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["argument",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["array.isarray(e.meta.target",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["art4",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["asked",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["assume",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}}}],["attacks",{"_index":921,"title":{},"body":{"contributing.html":{}}}],["attention",{"_index":915,"title":{},"body":{"contributing.html":{}}}],["attribution",{"_index":1017,"title":{},"body":{"contributing.html":{}}}],["auth.controller",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt.auth.guard",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":66,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":312,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":304,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":458,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authoremail",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["authorid",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["authors",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["authrequest",{"_index":114,"title":{"interfaces/AuthRequest.html":{}},"body":{"interfaces/AuthRequest.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1021,"title":{},"body":{"contributing.html":{}}}],["await",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}}}],["azkidenz",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["backers",{"_index":1109,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":290,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["badrequestexception(error.message",{"_index":302,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["ban",{"_index":957,"title":{},"body":{"contributing.html":{}}}],["based",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["bcrypt",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(dto.password",{"_index":557,"title":{},"body":{"injectables/UsersService.html":{}}}],["before",{"_index":826,"title":{},"body":{"contributing.html":{}}}],["behavior",{"_index":889,"title":{},"body":{"contributing.html":{}}}],["behaviors",{"_index":961,"title":{},"body":{"contributing.html":{}}}],["being",{"_index":895,"title":{},"body":{"contributing.html":{}}}],["benefit",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["best",{"_index":905,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"contributing.html":{}}}],["boolean",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["boolean(user",{"_index":349,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":700,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["br",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["brazilian",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["brits",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1126,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1124,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1145,"title":{},"body":{"todo.html":{}}}],["build",{"_index":835,"title":{},"body":{"contributing.html":{}}}],["building",{"_index":1075,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":180,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["canactivate",{"_index":305,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":309,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["can’t",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["care",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catcherror",{"_index":186,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["catcherror((error",{"_index":190,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["change",{"_index":645,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["changed",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":567,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changelogs",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["changes",{"_index":569,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["chinese",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["chronological",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["circumstances",{"_index":997,"title":{},"body":{"contributing.html":{}}}],["clarified",{"_index":734,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["clarify",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["clarifying",{"_index":937,"title":{},"body":{"contributing.html":{}}}],["class",{"_index":21,"title":{"classes/ConflictError.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"classes/Post.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":171,"title":{},"body":{"classes/ConflictError.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"classes/Post.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["client",{"_index":494,"title":{},"body":{"classes/UniqueConstraintError.html":{},"miscellaneous/typealiases.html":{}}}],["closed",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":438,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":439,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":467,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":469,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":468,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_usersmodule",{"_index":538,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":539,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":540,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cname",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":827,"title":{},"body":{"contributing.html":{}}}],["coisa",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["com",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["comments",{"_index":919,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":951,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["community",{"_index":868,"title":{},"body":{"contributing.html":{}}}],["comparison",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["complaints",{"_index":991,"title":{},"body":{"contributing.html":{}}}],["conduct",{"_index":828,"title":{},"body":{"contributing.html":{}}}],["conectada",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["conectar",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["confidentiality",{"_index":1000,"title":{},"body":{"contributing.html":{}}}],["conflict",{"_index":493,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["conflicterror",{"_index":170,"title":{"classes/ConflictError.html":{}},"body":{"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["conflictexception",{"_index":184,"title":{},"body":{"injectables/ConflictInterceptor.html":{}}}],["conflictexception(error.message",{"_index":193,"title":{},"body":{"injectables/ConflictInterceptor.html":{}}}],["conflictinterceptor",{"_index":174,"title":{"injectables/ConflictInterceptor.html":{}},"body":{"injectables/ConflictInterceptor.html":{},"coverage.html":{}}}],["connect",{"_index":459,"title":{},"body":{"injectables/PostsService.html":{}}}],["considered",{"_index":931,"title":{},"body":{"contributing.html":{}}}],["console.log(error",{"_index":192,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["const",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PostsService.html":{},"classes/UniqueConstraintError.html":{},"injectables/UsersService.html":{}}}],["constraint",{"_index":489,"title":{},"body":{"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["constructive",{"_index":902,"title":{},"body":{"contributing.html":{}}}],["constructor",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"classes/UniqueConstraintError.html":{},"injectables/UsersService.html":{}}}],["constructor(e",{"_index":490,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["constructor(jwtservice",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(prisma",{"_index":445,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":306,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["contacting",{"_index":988,"title":{},"body":{"contributing.html":{}}}],["contained",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["container",{"_index":848,"title":{},"body":{"contributing.html":{}}}],["contains",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["content",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"todo.html":{}}}],["context",{"_index":182,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["context.getclass",{"_index":329,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":328,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":337,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["contributes",{"_index":890,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":816,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributions",{"_index":955,"title":{},"body":{"contributing.html":{}}}],["contributor",{"_index":960,"title":{},"body":{"contributing.html":{}}}],["contributors",{"_index":865,"title":{},"body":{"contributing.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('posts",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corrective",{"_index":943,"title":{},"body":{"contributing.html":{}}}],["counter",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["covenant",{"_index":1019,"title":{},"body":{"contributing.html":{}}}],["covenant.org/version/1/4",{"_index":1023,"title":{},"body":{"contributing.html":{}}}],["coverage",{"_index":1024,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":391,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"todo.html":{}}}],["create(@body",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["create(createpostdto",{"_index":398,"title":{},"body":{"controllers/PostsController.html":{}}}],["create(createuserdto",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(dto",{"_index":447,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createduser",{"_index":559,"title":{},"body":{"injectables/UsersService.html":{}}}],["createpostdto",{"_index":194,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":218,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":891,"title":{},"body":{"contributing.html":{}}}],["criticism",{"_index":903,"title":{},"body":{"contributing.html":{}}}],["croatian",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["cry",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["custom",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["czech",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["da",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["data",{"_index":456,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":294,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseerror",{"_index":284,"title":{"classes/DatabaseError.html":{}},"body":{"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"coverage.html":{}}}],["databaseerror(e.message",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseinterceptor",{"_index":286,"title":{"injectables/DatabaseInterceptor.html":{}},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["dates",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["de",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginRequestBody.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deem",{"_index":962,"title":{},"body":{"contributing.html":{}}}],["deemed",{"_index":995,"title":{},"body":{"contributing.html":{}}}],["default",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"contributing.html":{}}}],["delete",{"_index":418,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":410,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"contributing.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecations",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":1081,"title":{},"body":{"index.html":{},"properties.html":{},"todo.html":{}}}],["details",{"_index":840,"title":{},"body":{"contributing.html":{}}}],["determined",{"_index":1014,"title":{},"body":{"contributing.html":{}}}],["developers",{"_index":857,"title":{},"body":{"contributing.html":{}}}],["development",{"_index":1089,"title":{},"body":{"index.html":{}}}],["diff",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["difference",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["differentiate",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["differing",{"_index":897,"title":{},"body":{"contributing.html":{}}}],["diffs",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["diretamente",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["disability",{"_index":876,"title":{},"body":{"contributing.html":{}}}],["discuss",{"_index":820,"title":{},"body":{"contributing.html":{}}}],["documentation",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["doing",{"_index":838,"title":{},"body":{"contributing.html":{}}}],["domain",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["done",{"_index":1152,"title":{},"body":{"todo.html":{}}}],["dto",{"_index":449,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["dto.authoremail",{"_index":455,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto/create",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UniqueConstraintError.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["e.clientversion",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.code",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.meta",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.meta.target",{"_index":496,"title":{},"body":{"classes/UniqueConstraintError.html":{},"miscellaneous/variables.html":{}}}],["e.meta.target.every((item",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1099,"title":{},"body":{"index.html":{}}}],["edit",{"_index":949,"title":{},"body":{"contributing.html":{}}}],["edits",{"_index":953,"title":{},"body":{"contributing.html":{}}}],["efficient",{"_index":1076,"title":{},"body":{"index.html":{}}}],["electronic",{"_index":927,"title":{},"body":{"contributing.html":{}}}],["email",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"contributing.html":{}}}],["email@email.com",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["empathy",{"_index":907,"title":{},"body":{"contributing.html":{}}}],["empty",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["enable",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["encourage",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["end",{"_index":836,"title":{},"body":{"contributing.html":{}}}],["enforce",{"_index":1008,"title":{},"body":{"contributing.html":{}}}],["enforcement",{"_index":983,"title":{},"body":{"contributing.html":{}}}],["english",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":833,"title":{},"body":{"contributing.html":{}}}],["entities/post.entity",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["entities/user.entity",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enumerations",{"_index":1064,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":842,"title":{},"body":{"contributing.html":{}}}],["equally",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["error",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"miscellaneous/variables.html":{}}}],["error('user",{"_index":342,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error.ts",{"_index":173,"title":{},"body":{"classes/ConflictError.html":{},"classes/DatabaseError.html":{},"classes/NotFoundError.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["error.ts:4",{"_index":492,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["error.util",{"_index":299,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["error.util.ts",{"_index":1043,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors.util",{"_index":295,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["errors.util.ts",{"_index":1042,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors/database",{"_index":289,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["errors/not",{"_index":378,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["errors/unauthorized",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["es",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["estiver",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["etc",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ethnicity",{"_index":877,"title":{},"body":{"contributing.html":{}}}],["event",{"_index":981,"title":{},"body":{"contributing.html":{}}}],["everyone",{"_index":872,"title":{},"body":{"contributing.html":{}}}],["evolving",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"changelog.html":{},"index.html":{},"todo.html":{}}}],["examples",{"_index":809,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["exclusionary",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["executioncontext",{"_index":178,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["exibir",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exists",{"_index":500,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["expected",{"_index":939,"title":{},"body":{"contributing.html":{}}}],["experience",{"_index":871,"title":{},"body":{"contributing.html":{}}}],["experiences",{"_index":899,"title":{},"body":{"contributing.html":{}}}],["expiresin",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["explanation",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["explicit",{"_index":929,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exposed",{"_index":844,"title":{},"body":{"contributing.html":{}}}],["express",{"_index":122,"title":{},"body":{"interfaces/AuthRequest.html":{},"dependencies.html":{}}}],["expression",{"_index":879,"title":{},"body":{"contributing.html":{}}}],["extends",{"_index":117,"title":{},"body":{"interfaces/AuthRequest.html":{},"classes/ConflictError.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NotFoundError.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["face",{"_index":1010,"title":{},"body":{"contributing.html":{}}}],["fair",{"_index":942,"title":{},"body":{"contributing.html":{}}}],["faith",{"_index":1009,"title":{},"body":{"contributing.html":{}}}],["false",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["feat",{"_index":1140,"title":{},"body":{"todo.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"todo.html":{}}}],["files",{"_index":851,"title":{},"body":{"contributing.html":{}}}],["findall",{"_index":392,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyemail",{"_index":544,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":549,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":545,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":551,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":393,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["findone(@param('id",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":401,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["first",{"_index":819,"title":{},"body":{"contributing.html":{},"todo.html":{}}}],["fix",{"_index":679,"title":{},"body":{"changelog.html":{},"todo.html":{}}}],["fixed",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["focusing",{"_index":904,"title":{},"body":{"contributing.html":{}}}],["follow",{"_index":829,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["footnote",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":572,"title":{},"body":{"changelog.html":{},"todo.html":{}}}],["formatting",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["fostering",{"_index":863,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":343,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["found.interceptor.ts",{"_index":375,"title":{},"body":{"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["found.interceptor.ts:14",{"_index":376,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["framework",{"_index":1074,"title":{},"body":{"index.html":{}}}],["free",{"_index":870,"title":{},"body":{"contributing.html":{}}}],["french",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["frequently",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["fun",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":762,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functions",{"_index":1070,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":670,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["gather",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["gender",{"_index":878,"title":{},"body":{"contributing.html":{}}}],["german",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["get(':id",{"_index":402,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get('feed",{"_index":404,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpublishedposts",{"_index":394,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getting",{"_index":565,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"todo.html":{}},"body":{}}],["git",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["github",{"_index":800,"title":{},"body":{"changelog.html":{},"todo.html":{}}}],["global",{"_index":471,"title":{},"body":{"modules/PrismaModule.html":{}}}],["good",{"_index":808,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["gracefully",{"_index":900,"title":{},"body":{"contributing.html":{}}}],["grow",{"_index":1104,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["guiding",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["h4vry",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["hameds",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["handledatabaseerrors",{"_index":292,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handledatabaseerrors(error",{"_index":301,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["harassing",{"_index":985,"title":{},"body":{"contributing.html":{}}}],["harassment",{"_index":869,"title":{},"body":{"contributing.html":{}}}],["harmful",{"_index":965,"title":{},"body":{"contributing.html":{}}}],["headings",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["hello",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["here",{"_index":1114,"title":{},"body":{"index.html":{}}}],["home",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["homepage",{"_index":1143,"title":{},"body":{"todo.html":{}}}],["hopefully",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["http://contributor",{"_index":1022,"title":{},"body":{"contributing.html":{}}}],["httpcode",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1120,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ideal",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["identifier",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":585,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["ignoreexpiration",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoring",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["imagery",{"_index":913,"title":{},"body":{"contributing.html":{}}}],["implements",{"_index":188,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/User.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["improve",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["inappropriate",{"_index":932,"title":{},"body":{"contributing.html":{}}}],["incident",{"_index":1003,"title":{},"body":{"contributing.html":{}}}],["include",{"_index":461,"title":{},"body":{"injectables/PostsService.html":{},"contributing.html":{}}}],["includes",{"_index":841,"title":{},"body":{"contributing.html":{}}}],["including",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["inclusive",{"_index":893,"title":{},"body":{"contributing.html":{}}}],["incorrect",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["increase",{"_index":849,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":970,"title":{},"body":{"contributing.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["informar",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["information",{"_index":924,"title":{},"body":{"contributing.html":{}}}],["informações",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["inherited",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["inject",{"_index":311,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["inject(usersservice",{"_index":324,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["injectable",{"_index":60,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":61,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insert",{"_index":990,"title":{},"body":{"contributing.html":{}}}],["install",{"_index":834,"title":{},"body":{"contributing.html":{}}}],["installation",{"_index":1085,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1087,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":191,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["instances",{"_index":946,"title":{},"body":{"contributing.html":{}}}],["instead",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["insulting/derogatory",{"_index":918,"title":{},"body":{"contributing.html":{}}}],["intentionally",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["interactions",{"_index":830,"title":{},"body":{"contributing.html":{}}}],["intercept",{"_index":176,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["intercept(context",{"_index":177,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["interest",{"_index":862,"title":{},"body":{"contributing.html":{}}}],["interface",{"_index":113,"title":{"interfaces/AuthRequest.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{}},"body":{"interfaces/AuthRequest.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"contributing.html":{},"coverage.html":{}}}],["interfaces",{"_index":115,"title":{},"body":{"interfaces/AuthRequest.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"overview.html":{}}}],["investigated",{"_index":993,"title":{},"body":{"contributing.html":{}}}],["is_public_key",{"_index":323,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["iso",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["isoptional",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ispasswordvalid",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprismaerror",{"_index":296,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isprismaerror(error",{"_index":300,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["ispublic",{"_index":326,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["isstring()@isoptional",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@minlength(4)@maxlength(20)@matches(/((?=.*\\d)|(?=.+\\w+))(?![.\\n])(?=.*[a",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["issue",{"_index":823,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":954,"title":{},"body":{"contributing.html":{}}}],["it's",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["italian",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["item",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jane",{"_index":1146,"title":{},"body":{"todo.html":{}}}],["jira",{"_index":1150,"title":{},"body":{"todo.html":{}}}],["jkostolansky",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["john",{"_index":1141,"title":{},"body":{"todo.html":{}}}],["join",{"_index":1111,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":56,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":98,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1117,"title":{},"body":{"index.html":{}}}],["karalamalar",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["keeping",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["korean",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["language",{"_index":894,"title":{},"body":{"contributing.html":{}}}],["latest",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["layer",{"_index":837,"title":{},"body":{"contributing.html":{}}}],["leadership",{"_index":1016,"title":{},"body":{"contributing.html":{}}}],["left",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["level",{"_index":880,"title":{},"body":{"contributing.html":{}}}],["license",{"_index":1123,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1103,"title":{},"body":{"index.html":{}}}],["link",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["links",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["locations",{"_index":847,"title":{},"body":{"contributing.html":{}}}],["log",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["logging",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["login",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["login(@body",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(undefined",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginrequestbody",{"_index":70,"title":{"classes/LoginRequestBody.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"coverage.html":{}}}],["logs",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["m",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["magol",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["mail",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"contributing.html":{}}}],["maintain",{"_index":999,"title":{},"body":{"contributing.html":{}}}],["maintainers",{"_index":866,"title":{},"body":{"contributing.html":{}}}],["make",{"_index":596,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["makes",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["making",{"_index":718,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["map",{"_index":313,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["map((req",{"_index":340,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["map((user",{"_index":348,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["markdown",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["mas",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["match",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["matches",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["matches(/((?=.*\\d)|(?=.+\\w+))(?![.\\n])(?=.*[a",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["maxlength(20",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["media",{"_index":974,"title":{},"body":{"contributing.html":{}}}],["members",{"_index":909,"title":{},"body":{"contributing.html":{}}}],["mentioning",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["mentions",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["merge",{"_index":673,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["mergemap",{"_index":314,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mergemap((request",{"_index":338,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mergemap((userfromjwt",{"_index":344,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mergemap((value",{"_index":334,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["mesmo",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["metadata",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":824,"title":{},"body":{"contributing.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["minlength(4",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["miscellaneous",{"_index":1063,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":1102,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1092,"title":{},"body":{"index.html":{}}}],["model/authrequest",{"_index":322,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["model/loginrequestbody",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["model/userfromjwt",{"_index":321,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["model/userpayload",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["model/usertoken",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["models",{"_index":319,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1113,"title":{},"body":{"index.html":{}}}],["mpbzh",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["much",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["myśliwiec",{"_index":1118,"title":{},"body":{"index.html":{}}}],["name",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nationality",{"_index":881,"title":{},"body":{"contributing.html":{}}}],["navigation",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["necessariamente",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["necessary",{"_index":996,"title":{},"body":{"contributing.html":{}}}],["necessário",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["needs",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["nest",{"_index":1082,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1122,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":185,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":504,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":179,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["next.handle().pipe",{"_index":189,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["node.js",{"_index":1073,"title":{},"body":{"index.html":{}}}],["noise",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["nome",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["notable",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":754,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["notfounderror",{"_index":371,"title":{"classes/NotFoundError.html":{}},"body":{"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["notfoundexception",{"_index":377,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["notfoundexception(error.message",{"_index":379,"title":{},"body":{"injectables/NotFoundInterceptor.html":{}}}],["notfoundinterceptor",{"_index":373,"title":{"injectables/NotFoundInterceptor.html":{}},"body":{"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["now",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":1086,"title":{},"body":{"index.html":{}}}],["number",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":850,"title":{},"body":{"contributing.html":{}}}],["não",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["o",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["object",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obligated",{"_index":998,"title":{},"body":{"contributing.html":{}}}],["observable",{"_index":183,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["obvious",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["occupy",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["of(canactivate).pipe",{"_index":333,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["of(request).pipe",{"_index":339,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["offensive",{"_index":964,"title":{},"body":{"contributing.html":{}}}],["official",{"_index":972,"title":{},"body":{"contributing.html":{}}}],["offline",{"_index":980,"title":{},"body":{"contributing.html":{}}}],["once",{"_index":854,"title":{},"body":{"contributing.html":{}}}],["online",{"_index":979,"title":{},"body":{"contributing.html":{}}}],["onmoduledestroy",{"_index":475,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":476,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":698,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["optional",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ordering",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["orientation",{"_index":887,"title":{},"body":{"contributing.html":{}}}],["osadchyi",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["others",{"_index":923,"title":{},"body":{"contributing.html":{}}}],["otherwise",{"_index":986,"title":{},"body":{"contributing.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"changelog.html":{},"overview.html":{}}}],["outdated",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":1127,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owners",{"_index":825,"title":{},"body":{"contributing.html":{}}}],["p2002",{"_index":1069,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["package",{"_index":1046,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pages",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["para",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["param",{"_index":417,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"contributing.html":{}}}],["partial",{"_index":1160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":503,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpostdto",{"_index":502,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createuserdto",{"_index":508,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participants",{"_index":911,"title":{},"body":{"contributing.html":{}}}],["participation",{"_index":867,"title":{},"body":{"contributing.html":{}}}],["passport",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginRequestBody.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":416,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":414,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["paulo",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["payload",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["people",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["perfil",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["permanent",{"_index":1012,"title":{},"body":{"contributing.html":{}}}],["permanently",{"_index":959,"title":{},"body":{"contributing.html":{}}}],["permission",{"_index":858,"title":{},"body":{"contributing.html":{}}}],["persian",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["personal",{"_index":882,"title":{},"body":{"contributing.html":{}}}],["pessoa",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["phrasing",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["physical",{"_index":926,"title":{},"body":{"contributing.html":{}}}],["pierceh89",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":818,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["pledge",{"_index":861,"title":{},"body":{"contributing.html":{}}}],["podcast",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["policies",{"_index":1005,"title":{},"body":{"contributing.html":{}}}],["polish",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["political",{"_index":920,"title":{},"body":{"contributing.html":{}}}],["ports",{"_index":845,"title":{},"body":{"contributing.html":{}}}],["portugese",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["portuguese",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["porx",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["positive",{"_index":892,"title":{},"body":{"contributing.html":{}}}],["possível",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["post",{"_index":80,"title":{"classes/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('login",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:13",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:10",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:4",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:6",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:7",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post:8",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posted",{"_index":1006,"title":{},"body":{"contributing.html":{}}}],["posting",{"_index":973,"title":{},"body":{"contributing.html":{}}}],["posts",{"_index":390,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":442,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":387,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":420,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["precisa",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["precise",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["prefix",{"_index":389,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["principal",{"_index":120,"title":{},"body":{"interfaces/AuthRequest.html":{}}}],["principles",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["prior",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["prisma",{"_index":298,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma.postcreateinput",{"_index":457,"title":{},"body":{"injectables/PostsService.html":{}}}],["prisma.postuncheckedcreateinput",{"_index":386,"title":{},"body":{"classes/Post.html":{}}}],["prisma.postupdateinput",{"_index":464,"title":{},"body":{"injectables/PostsService.html":{}}}],["prisma.service",{"_index":472,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":556,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.useruncheckedcreateinput",{"_index":515,"title":{},"body":{"classes/User.html":{}}}],["prisma.userupdateinput",{"_index":562,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/client",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":474,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclienterror",{"_index":491,"title":{},"body":{"classes/UniqueConstraintError.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["prismaclientknownrequesterror",{"_index":1158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prismaerrors",{"_index":1065,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prismaerrors.uniqueconstraintfail",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":42,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":440,"title":{"injectables/PrismaService.html":{}},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"contributing.html":{}}}],["process",{"_index":832,"title":{},"body":{"contributing.html":{}}}],["process.env.jwt_secret",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":1094,"title":{},"body":{"index.html":{}}}],["professional",{"_index":933,"title":{},"body":{"contributing.html":{}}}],["progress",{"_index":1148,"title":{},"body":{"todo.html":{}}}],["progressive",{"_index":1072,"title":{},"body":{"index.html":{}}}],["project",{"_index":570,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["project's",{"_index":1015,"title":{},"body":{"contributing.html":{}}}],["projects",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["proper",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":119,"title":{"properties.html":{}},"body":{"interfaces/AuthRequest.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{},"classes/Post.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"properties.html":{}}}],["provide",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["pt",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["public",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('login')@httpcode(httpstatus.ok",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["published",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["publishing",{"_index":922,"title":{},"body":{"contributing.html":{}}}],["publishpost",{"_index":395,"title":{},"body":{"controllers/PostsController.html":{}}}],["publishpost(@param('id",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["publishpost(id",{"_index":406,"title":{},"body":{"controllers/PostsController.html":{}}}],["pull",{"_index":831,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('publish/:id",{"_index":407,"title":{},"body":{"controllers/PostsController.html":{}}}],["qualquer",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["que",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["questions",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["race",{"_index":884,"title":{},"body":{"contributing.html":{}}}],["raw",{"_index":1136,"title":{},"body":{"todo.html":{}}}],["read",{"_index":1112,"title":{},"body":{"index.html":{}}}],["readme",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["readme.md",{"_index":839,"title":{},"body":{"contributing.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reasonably",{"_index":930,"title":{},"body":{"contributing.html":{}}}],["recent",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["recommended",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["record",{"_index":498,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["rede",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["redes",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["refer",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["reflect",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":307,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["regard",{"_index":1001,"title":{},"body":{"contributing.html":{}}}],["regardless",{"_index":873,"title":{},"body":{"contributing.html":{}}}],["reject",{"_index":950,"title":{},"body":{"contributing.html":{}}}],["release",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["released",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["releases",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["religion",{"_index":885,"title":{},"body":{"contributing.html":{}}}],["reluctantly",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":396,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"contributing.html":{}}}],["remove(@param('id",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":409,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removed",{"_index":684,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["repercussions",{"_index":1013,"title":{},"body":{"contributing.html":{}}}],["repo",{"_index":1149,"title":{},"body":{"todo.html":{}}}],["reported",{"_index":987,"title":{},"body":{"contributing.html":{}}}],["reporter",{"_index":1002,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":817,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["represent",{"_index":852,"title":{},"body":{"contributing.html":{}}}],["representation",{"_index":982,"title":{},"body":{"contributing.html":{}}}],["representative",{"_index":978,"title":{},"body":{"contributing.html":{}}}],["representing",{"_index":971,"title":{},"body":{"contributing.html":{}}}],["req.user",{"_index":341,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request",{"_index":118,"title":{},"body":{"interfaces/AuthRequest.html":{},"injectables/JwtAuthGuard.html":{},"contributing.html":{}}}],["request.principal",{"_index":347,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["respectful",{"_index":896,"title":{},"body":{"contributing.html":{}}}],["response",{"_index":945,"title":{},"body":{"contributing.html":{}}}],["responsibilities",{"_index":935,"title":{},"body":{"contributing.html":{}}}],["responsibility",{"_index":948,"title":{},"body":{"contributing.html":{}}}],["responsible",{"_index":936,"title":{},"body":{"contributing.html":{}}}],["result",{"_index":994,"title":{},"body":{"contributing.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotFoundInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UnauthorizedInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["reviewed",{"_index":992,"title":{},"body":{"contributing.html":{}}}],["reviewer",{"_index":860,"title":{},"body":{"contributing.html":{}}}],["rewrite",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":947,"title":{},"body":{"contributing.html":{}}}],["ru",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1090,"title":{},"body":{"index.html":{}}}],["russian",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["rxjs",{"_index":187,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":291,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["s",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["salvatore",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["scalable",{"_index":1077,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["scheme",{"_index":853,"title":{},"body":{"contributing.html":{}}}],["scope",{"_index":966,"title":{},"body":{"contributing.html":{}}}],["second",{"_index":859,"title":{},"body":{"contributing.html":{}}}],["secret",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["sections",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["sem",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["semantic",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["semver",{"_index":708,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["senha",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["separately",{"_index":1007,"title":{},"body":{"contributing.html":{}}}],["ser",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["serve",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["server",{"_index":1078,"title":{},"body":{"index.html":{}}}],["services",{"_index":317,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["setmetadata(is_public_key",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":934,"title":{},"body":{"contributing.html":{}}}],["sexual",{"_index":886,"title":{},"body":{"contributing.html":{}}}],["sexualized",{"_index":912,"title":{},"body":{"contributing.html":{}}}],["showing",{"_index":906,"title":{},"body":{"contributing.html":{}}}],["side",{"_index":1079,"title":{},"body":{"index.html":{}}}],["sign",{"_index":855,"title":{},"body":{"contributing.html":{}}}],["signoptions",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["simplified",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["site",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["size",{"_index":875,"title":{},"body":{"contributing.html":{}}}],["slovak",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["sociais",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["social",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"contributing.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseError.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"classes/NotFoundError.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["spaces",{"_index":969,"title":{},"body":{"contributing.html":{}}}],["specific",{"_index":1004,"title":{},"body":{"contributing.html":{}}}],["spelling",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["sponsors",{"_index":1106,"title":{},"body":{"index.html":{}}}],["src/.../handle",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1071,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma",{"_index":1155,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../prisma.errors.ts",{"_index":1066,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../userfromjwt.ts",{"_index":1156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.auth.guard.ts",{"_index":303,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.auth.guard.ts:23",{"_index":308,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/jwt.auth.guard.ts:31",{"_index":310,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":350,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/model/authrequest.ts",{"_index":116,"title":{},"body":{"interfaces/AuthRequest.html":{},"coverage.html":{}}}],["src/auth/model/loginrequestbody.ts",{"_index":368,"title":{},"body":{"classes/LoginRequestBody.html":{},"coverage.html":{}}}],["src/auth/model/loginrequestbody.ts:11",{"_index":369,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/model/loginrequestbody.ts:19",{"_index":370,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/model/userfromjwt.ts",{"_index":1159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/auth/model/userpayload.ts",{"_index":516,"title":{},"body":{"interfaces/UserPayload.html":{},"coverage.html":{}}}],["src/auth/model/usertoken.ts",{"_index":517,"title":{},"body":{"interfaces/UserToken.html":{},"coverage.html":{}}}],["src/auth/public.decorator.ts",{"_index":1032,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/errors/conflict",{"_index":172,"title":{},"body":{"classes/ConflictError.html":{},"injectables/ConflictInterceptor.html":{},"coverage.html":{}}}],["src/errors/database",{"_index":285,"title":{},"body":{"classes/DatabaseError.html":{},"coverage.html":{}}}],["src/errors/not",{"_index":372,"title":{},"body":{"classes/NotFoundError.html":{},"coverage.html":{}}}],["src/errors/prisma",{"_index":1157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/errors/unauthorized",{"_index":481,"title":{},"body":{"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["src/errors/unique",{"_index":488,"title":{},"body":{"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["src/interceptors/conflict.interceptor.ts",{"_index":175,"title":{},"body":{"injectables/ConflictInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/conflict.interceptor.ts:13",{"_index":181,"title":{},"body":{"injectables/ConflictInterceptor.html":{}}}],["src/interceptors/database.interceptor.ts",{"_index":287,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/database.interceptor.ts:16",{"_index":288,"title":{},"body":{"injectables/DatabaseInterceptor.html":{}}}],["src/interceptors/entity",{"_index":374,"title":{},"body":{"injectables/NotFoundInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/unauthorized.interceptor.ts",{"_index":483,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/unauthorized.interceptor.ts:14",{"_index":484,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{}}}],["src/main.ts",{"_index":1035,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dto/create",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":501,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts",{"_index":380,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts:4",{"_index":383,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:5",{"_index":385,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:6",{"_index":382,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:7",{"_index":384,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/entities/post.entity.ts:8",{"_index":381,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":388,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:22",{"_index":399,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:27",{"_index":400,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:32",{"_index":405,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":403,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:42",{"_index":415,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":408,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:52",{"_index":411,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":441,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":444,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:11",{"_index":448,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:33",{"_index":450,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:41",{"_index":452,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:49",{"_index":451,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:58",{"_index":454,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:69",{"_index":453,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:8",{"_index":446,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/prisma/prisma.errors.ts",{"_index":1067,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/prisma/prisma.module.ts",{"_index":470,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":443,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":473,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:13",{"_index":477,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:9",{"_index":478,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/users/dto/create",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":507,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":123,"title":{},"body":{"interfaces/AuthRequest.html":{}}}],["src/users/entities/user.entity.ts",{"_index":510,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:4",{"_index":512,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:5",{"_index":511,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:6",{"_index":514,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:7",{"_index":513,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:23",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:28",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:33",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:38",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":541,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":543,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":552,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":550,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":547,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":548,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":554,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":553,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":546,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/handle",{"_index":293,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/is",{"_index":297,"title":{},"body":{"injectables/DatabaseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standard",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["standardized",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["standards",{"_index":888,"title":{},"body":{"contributing.html":{}}}],["start",{"_index":642,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["start:dev",{"_index":1093,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1095,"title":{},"body":{"index.html":{}}}],["started",{"_index":566,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"todo.html":{}},"body":{}}],["starter",{"_index":1084,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":1115,"title":{},"body":{"index.html":{}}}],["stop",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["strange",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["strategy",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["sub",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserPayload.html":{},"changelog.html":{},"todo.html":{}}}],["such",{"_index":925,"title":{},"body":{"contributing.html":{}}}],["super",{"_index":325,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super(`a",{"_index":497,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["super.canactivate(context",{"_index":331,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1107,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1125,"title":{},"body":{"modules.html":{}}}],["swedish",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["take",{"_index":940,"title":{},"body":{"contributing.html":{}}}],["takewhile",{"_index":315,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["takewhile((value",{"_index":336,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["tallesl",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["tap",{"_index":316,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["tap((user",{"_index":346,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["task",{"_index":1147,"title":{},"body":{"todo.html":{}}}],["team",{"_index":989,"title":{},"body":{"contributing.html":{}}}],["temporarily",{"_index":958,"title":{},"body":{"contributing.html":{}}}],["temporary",{"_index":1011,"title":{},"body":{"contributing.html":{}}}],["test",{"_index":1098,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1101,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1100,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1097,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1105,"title":{},"body":{"index.html":{}}}],["things",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["this.$connect",{"_index":479,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":480,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(email",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.sign(payload",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findone(+id",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpublishedposts",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.remove(+id",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(+id",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prisma.post.create",{"_index":460,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.delete",{"_index":466,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.findmany",{"_index":462,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.finduniqueorthrow",{"_index":463,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.post.update",{"_index":465,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prisma.user.create",{"_index":560,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.delete",{"_index":564,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":561,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":555,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":563,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":327,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.userservice.findbyemail(email",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(+id",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(userfromjwt.id",{"_index":345,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.usersservice.remove(+id",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateuser(email",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["threatening",{"_index":963,"title":{},"body":{"contributing.html":{}}}],["throughout",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["throw",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotFoundInterceptor.html":{},"injectables/UnauthorizedInterceptor.html":{}}}],["tianshuo",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["title",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["todo",{"_index":1133,"title":{"todo.html":{}},"body":{"todo.html":{}}}],["todo.md",{"_index":1134,"title":{},"body":{"todo.html":{}}}],["touch",{"_index":1116,"title":{},"body":{"index.html":{}}}],["towards",{"_index":908,"title":{},"body":{"contributing.html":{}}}],["traditional",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["transformer",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["translation",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["translations",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["trolling",{"_index":917,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":330,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["turkish",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["twitter",{"_index":1121,"title":{},"body":{"index.html":{}}}],["two",{"_index":856,"title":{},"body":{"contributing.html":{}}}],["tylerfortune8",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["type",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"injectables/ConflictInterceptor.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestBody.html":{},"injectables/NotFoundInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UnauthorizedInterceptor.html":{},"classes/UniqueConstraintError.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserToken.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1153,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":332,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":505,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1083,"title":{},"body":{"index.html":{}}}],["typos",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["ukrainian",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["uma",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unacceptable",{"_index":910,"title":{},"body":{"contributing.html":{}}}],["unauthorizederror",{"_index":143,"title":{"classes/UnauthorizedError.html":{}},"body":{"injectables/AuthService.html":{},"classes/UnauthorizedError.html":{},"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["unauthorizedexception",{"_index":485,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{}}}],["unauthorizedexception(error.message",{"_index":486,"title":{},"body":{"injectables/UnauthorizedInterceptor.html":{}}}],["unauthorizedinterceptor",{"_index":482,"title":{"injectables/UnauthorizedInterceptor.html":{}},"body":{"injectables/UnauthorizedInterceptor.html":{},"coverage.html":{}}}],["undefined",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["understand",{"_index":1137,"title":{},"body":{"todo.html":{}}}],["unicorns",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["uniqueconstrainterror",{"_index":487,"title":{"classes/UniqueConstraintError.html":{}},"body":{"classes/UniqueConstraintError.html":{},"coverage.html":{}}}],["uniqueconstrainterror(e",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uniqueconstraintfail",{"_index":1068,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uniquefield",{"_index":495,"title":{},"body":{"classes/UniqueConstraintError.html":{}}}],["unit",{"_index":1096,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{}}}],["unlicensed",{"_index":1132,"title":{},"body":{"properties.html":{}}}],["unreleased",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["unwelcome",{"_index":914,"title":{},"body":{"contributing.html":{}}}],["up",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":397,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"contributing.html":{}}}],["update(@param('id",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":412,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatepostdto",{"_index":413,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":506,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["url",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["usando",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["use",{"_index":676,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["useclass",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":846,"title":{},"body":{"contributing.html":{}}}],["user",{"_index":121,"title":{"classes/User.html":{}},"body":{"interfaces/AuthRequest.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":509,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.email",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["user:17",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user:30",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user:38",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user:4",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userfromjwt",{"_index":320,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["username",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserPayload.html":{}}}],["userpayload",{"_index":148,"title":{"interfaces/UserPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["users",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":542,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":318,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["userscontroller",{"_index":518,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":43,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":132,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertoken",{"_index":146,"title":{"interfaces/UserToken.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserToken.html":{},"coverage.html":{}}}],["using",{"_index":643,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["utilizado",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":352,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{},"dependencies.html":{}}}],["value",{"_index":335,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":843,"title":{"miscellaneous/variables.html":{}},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":587,"title":{},"body":{"changelog.html":{},"contributing.html":{},"properties.html":{}}}],["versioning",{"_index":577,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["versions",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":822,"title":{},"body":{"contributing.html":{}}}],["view",{"_index":1135,"title":{},"body":{"todo.html":{}}}],["viewpoints",{"_index":898,"title":{},"body":{"contributing.html":{}}}],["visual",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["vs",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["watch",{"_index":1091,"title":{},"body":{"index.html":{}}}],["way",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["weak",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["website",{"_index":1119,"title":{},"body":{"index.html":{},"todo.html":{}}}],["webysther",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["welcoming",{"_index":864,"title":{},"body":{"contributing.html":{}}}],["wiki",{"_index":952,"title":{},"body":{"contributing.html":{}}}],["wish",{"_index":821,"title":{},"body":{"contributing.html":{}}}],["within",{"_index":968,"title":{},"body":{"contributing.html":{}}}],["without",{"_index":928,"title":{},"body":{"contributing.html":{}}}],["work",{"_index":1138,"title":{},"body":{"todo.html":{}}}],["world",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"changelog.html":{}}}],["writes",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["yanked",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["year",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["you'd",{"_index":1110,"title":{},"body":{"index.html":{}}}],["z",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["z])(?=.*[a",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginRequestBody.html":{}}}],["zapashcanon",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["zeliosariex",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtAuthGuard } from './auth/jwt.auth.guard';\n\n@Module({\n  imports: [UsersModule, PostsModule, PrismaModule, AuthModule],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(undefined: LoginRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            LoginRequestBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { LoginRequestBody } from './model/LoginRequestBody';\nimport { AuthService } from './auth.service';\nimport { Public } from './public.decorator';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  login(@Body() { email, password }: LoginRequestBody) {\n    return this.authService.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '30d' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthRequest.html":{"url":"interfaces/AuthRequest.html","title":"interface - AuthRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/AuthRequest.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            principal\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        principal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        principal:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from 'src/users/entities/user.entity';\n\nexport interface AuthRequest extends Request {\n  principal: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '@prisma/client';\n\nimport { UsersService } from 'src/users/users.service';\n\nimport { UnauthorizedError } from '../errors/unauthorized-error';\n\nimport { UserToken } from './model/UserToken';\nimport { UserPayload } from './model/UserPayload';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UsersService,\n  ) {}\n\n  async login(email: string, password: string): Promise {\n    const user: User = await this.validateUser(email, password);\n\n    const payload: UserPayload = {\n      username: user.email,\n      sub: user.id,\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  private async validateUser(email: string, password: string) {\n    const user = await this.userService.findByEmail(email);\n\n    if (user) {\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n\n      if (isPasswordValid) {\n        return {\n          ...user,\n          password: undefined,\n        };\n      }\n    }\n\n    throw new UnauthorizedError(\n      'Email address or password provided is incorrect.',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConflictError.html":{"url":"classes/ConflictError.html","title":"class - ConflictError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConflictError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/conflict-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ConflictError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConflictInterceptor.html":{"url":"injectables/ConflictInterceptor.html","title":"injectable - ConflictInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConflictInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/conflict.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/conflict.interceptor.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ConflictException,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { ConflictError } from 'src/errors/conflict-error';\n\n@Injectable()\nexport class ConflictInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof ConflictError) {\n          console.log(error, 'ConflictError');\n          throw new ConflictException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Post\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorEmail\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                published\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         Post\n\n                            \n                        \n                    \n                        \n                                Defined in         Post:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, IsString } from 'class-validator';\nimport { Post } from '../entities/post.entity';\n\nexport class CreatePostDto extends Post {\n  @IsString()\n  title: string;\n\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @IsEmail()\n  authorEmail: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:38\n\n                        \n                    \n\n            \n                \n                    O e-mail é necessário apra o login, mas não necessariamente precisa ser o mesmo e-mail da\nrede social que estiver conectada. Login sem rede social precisa de uma senha.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:17\n\n                        \n                    \n\n            \n                \n                    O nome será utilizado para qualquer coisa (Perfil, Home Page, etc) que precise exibir\ninformações da pessoa conectada.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:30\n\n                        \n                    \n\n            \n                \n                    É possível conectar com redes sociais sem uma senha, mas para login usando o e-mail diretamente\né necessário informar uma senha.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\n\nexport class CreateUserDto extends User {\n  /**\n   * O nome será utilizado para qualquer coisa (Perfil, Home Page, etc) que precise exibir\n   * informações da pessoa conectada.\n   * @example \"Paulo Salvatore\"\n   */\n  @IsString()\n  name: string;\n\n  /**\n   * É possível conectar com redes sociais sem uma senha, mas para login usando o e-mail diretamente\n   * é necessário informar uma senha.\n   * @example 123@abc\n   */\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {\n    message: 'password too weak',\n  })\n  password: string;\n\n  /**\n   * O e-mail é necessário apra o login, mas não necessariamente precisa ser o mesmo e-mail da\n   * rede social que estiver conectada. Login sem rede social precisa de uma senha.\n   * @example email@email.com\n   */\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseError.html":{"url":"classes/DatabaseError.html","title":"class - DatabaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/database-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DatabaseError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseInterceptor.html":{"url":"injectables/DatabaseInterceptor.html","title":"injectable - DatabaseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/database.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/database.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DatabaseError } from './../errors/database-error';\nimport {\n  BadRequestException,\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { handleDatabaseErrors } from 'src/utils/handle-database-errors.util';\nimport { isPrismaError } from 'src/utils/is-prisma-error.util';\n\n@Injectable()\nexport class DatabaseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (isPrismaError(error)) {\n          error = handleDatabaseErrors(error);\n        }\n\n        if (error instanceof DatabaseError) {\n          throw new BadRequestException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.auth.guard.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.auth.guard.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Inject, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n// Password\nimport { AuthGuard } from '@nestjs/passport';\n\n// RxJs\nimport { of } from 'rxjs';\nimport { map, mergeMap, takeWhile, tap } from 'rxjs/operators';\n\n// Services\nimport { UsersService } from '../users/users.service';\n\n// Models\nimport { UserFromJwt } from './model/UserFromJwt';\nimport { AuthRequest } from './model/AuthRequest';\n\n// Decorators\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    private reflector: Reflector,\n    @Inject(UsersService) private readonly usersService: UsersService,\n  ) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    const canActivate = super.canActivate(context);\n\n    if (typeof canActivate === 'boolean') {\n      return canActivate;\n    }\n\n    return of(canActivate).pipe(\n      mergeMap((value) => value),\n      takeWhile((value) => value),\n      map(() => context.switchToHttp().getRequest()),\n      mergeMap((request) =>\n        of(request).pipe(\n          map((req) => {\n            if (!req.user) {\n              throw Error('User was not found in request.');\n            }\n\n            return req.user;\n          }),\n          mergeMap((userFromJwt: UserFromJwt) =>\n            this.usersService.findById(userFromJwt.id),\n          ),\n          tap((user) => {\n            request.principal = user;\n          }),\n        ),\n      ),\n      map((user) => Boolean(user)),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: UserPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UserFromJwt } from './model/UserFromJwt';\nimport { UserPayload } from './model/UserPayload';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: UserPayload): Promise {\n    return { id: payload.sub, email: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginRequestBody.html":{"url":"classes/LoginRequestBody.html","title":"class - LoginRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/LoginRequestBody.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/model/LoginRequestBody.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/model/LoginRequestBody.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class LoginRequestBody {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.+\\W+))(?![.\\n])(?=.*[A-z])(?=.*[a-z]).*$/, {\n    message: 'password too weak',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundError.html":{"url":"classes/NotFoundError.html","title":"class - NotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/not-found-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NotFoundError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotFoundInterceptor.html":{"url":"injectables/NotFoundInterceptor.html","title":"injectable - NotFoundInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotFoundInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/entity-not-found.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/entity-not-found.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NotFoundError } from '../errors/not-found-error';\n\n@Injectable()\nexport class NotFoundInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof NotFoundError) {\n          throw new NotFoundException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                published\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\nexport class Post implements Prisma.PostUncheckedCreateInput {\n  id?: number;\n  title: string;\n  content?: string;\n  published?: boolean;\n  authorId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    \n                                publishPost\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishPost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('publish/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePostDto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePostDto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('post')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Post()\n  create(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.postsService.findAll();\n  }\n\n  @Get('feed')\n  async getPublishedPosts() {\n    return this.postsService.getPublishedPosts();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.postsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updatePostDto: UpdatePostDto) {\n    return this.postsService.update(+id, updatePostDto);\n  }\n\n  @Put('publish/:id')\n  publishPost(@Param('id') id: string) {\n    return this.postsService.update(+id, { published: true });\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.postsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPostsModule -->\n\nPrismaService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService, PrismaService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(dto: CreatePostDto): Promise {\n    const { authorEmail } = dto;\n\n    delete dto.authorEmail;\n\n    const data: Prisma.PostCreateInput = {\n      ...dto,\n      author: {\n        connect: {\n          email: authorEmail,\n        },\n      },\n    };\n\n    return this.prisma.post.create({\n      data,\n      include: {\n        author: true,\n      },\n    });\n  }\n\n  async findAll(): Promise {\n    return this.prisma.post.findMany({\n      include: {\n        author: true,\n      },\n    });\n  }\n\n  async getPublishedPosts(): Promise {\n    return this.prisma.post.findMany({\n      where: {\n        published: true,\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    return this.prisma.post.findUniqueOrThrow({\n      where: { id },\n      include: {\n        author: true,\n      },\n    });\n  }\n\n  async update(id: number, dto: UpdatePostDto): Promise {\n    const data: Prisma.PostUpdateInput = {\n      ...dto,\n    };\n\n    return this.prisma.post.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.prisma.post.delete({\n      where: { id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedError.html":{"url":"classes/UnauthorizedError.html","title":"class - UnauthorizedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/unauthorized-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UnauthorizedError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UnauthorizedInterceptor.html":{"url":"injectables/UnauthorizedInterceptor.html","title":"injectable - UnauthorizedInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UnauthorizedInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/unauthorized.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/unauthorized.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UnauthorizedError } from 'src/errors/unauthorized-error';\n\n@Injectable()\nexport class UnauthorizedInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError((error) => {\n        console.log(error, 'UnauthorizedError');\n        if (error instanceof UnauthorizedError) {\n          console.log(error, 'UnauthorizedError');\n          throw new UnauthorizedException(error.message);\n        } else {\n          throw error;\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UniqueConstraintError.html":{"url":"classes/UniqueConstraintError.html","title":"class - UniqueConstraintError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UniqueConstraintError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/unique-constraint-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ConflictError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(e: PrismaClientError)\n                    \n                \n                        \n                            \n                                Defined in src/errors/unique-constraint-error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        e\n                                                  \n                                                        \n                                                                        PrismaClientError\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictError } from './conflict-error';\nimport { PrismaClientError } from './prisma-client-error';\n\nexport class UniqueConstraintError extends ConflictError {\n  constructor(e: PrismaClientError) {\n    const uniqueField = e.meta.target;\n\n    super(`A record with this ${uniqueField} already exists`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePostDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from '@prisma/client';\n\nexport class User implements Prisma.UserUncheckedCreateInput {\n  id?: number;\n  email: string;\n  password: string;\n  name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPayload.html":{"url":"interfaces/UserPayload.html","title":"interface - UserPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/UserPayload.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserPayload {\n  username: string;\n  sub: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserToken.html":{"url":"interfaces/UserToken.html","title":"interface - UserToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/UserToken.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserToken {\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('user')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findById(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  remove(@Param('id') id: string) {\n    this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, PrismaService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, dto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async findById(id: number): Promise {\n    return this.prisma.user.findUnique({ where: { id } });\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.prisma.user.findUnique({ where: { email } });\n  }\n\n  async create(dto: CreateUserDto): Promise {\n    const data: Prisma.UserCreateInput = {\n      ...dto,\n      password: await bcrypt.hash(dto.password, 10),\n    };\n\n    const createdUser = await this.prisma.user.create({\n      data,\n    });\n\n    return {\n      ...createdUser,\n      password: undefined,\n    };\n  }\n\n  async findAll(): Promise {\n    return this.prisma.user.findMany();\n  }\n\n  async update(id: number, dto: UpdateUserDto): Promise {\n    const data: Prisma.UserUpdateInput = {\n      ...dto,\n    };\n\n    return this.prisma.user.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.prisma.user.delete({\n      where: { id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog, and this project adheres\nto Semantic Versioning.\nUnreleased\n1.0.0 - 2017-06-20\nAdded\n\nNew visual identity by @tylerfortune8.\nVersion navigation.\nLinks to latest released version in previous versions.\n\"Why keep a changelog?\" section.\n\"Who needs a changelog?\" section.\n\"How do I make a changelog?\" section.\n\"Frequently Asked Questions\" section.\nNew \"Guiding Principles\" sub-section to \"How do I make a changelog?\".\nSimplified and Traditional Chinese translations from @tianshuo.\nGerman translation from @mpbzh & @Art4.\nItalian translation from @azkidenz.\nSwedish translation from @magol.\nTurkish translation from @karalamalar.\nFrench translation from @zapashcanon.\nBrazilian Portugese translation from @Webysther.\nPolish translation from @amielucha & @m-aciek.\nRussian translation from @aishek.\nCzech translation from @h4vry.\nSlovak translation from @jkostolansky.\nKorean translation from @pierceh89.\nCroatian translation from @porx.\nPersian translation from @Hameds.\nUkrainian translation from @osadchyi-s.\n\nChanged\n\nStart using \"changelog\" over \"change log\" since it's the common usage.\nStart versioning based on the current English version at 0.3.0 to help translation authors keep things up-to-date.\nRewrite \"What makes unicorns cry?\" section.\nRewrite \"Ignoring Deprecations\" sub-section to clarify the ideal scenario.\nImprove \"Commit log diffs\" sub-section to further argument against them.\nMerge \"Why can’t people just use a git log diff?\" with \"Commit log diffs\"\nFix typos in Simplified Chinese and Traditional Chinese translations.\nFix typos in Brazilian Portuguese translation.\nFix typos in Turkish translation.\nFix typos in Czech translation.\nFix typos in Swedish translation.\nImprove phrasing in French translation.\nFix phrasing and spelling in German translation.\n\nRemoved\n\nSection about \"changelog\" vs \"CHANGELOG\".\n\n0.3.0 - 2015-12-03\nAdded\n\nRU translation from @aishek.\npt-BR translation from @tallesl.\nes-ES translation from @ZeliosAriex.\n\n0.2.0 - 2015-10-06\nChanged\n\nRemove exclusionary mentions of \"open source\" since this project can benefit both \"open\" and \"closed\" source projects\nequally.\n\n0.1.0 - 2015-10-06\nAdded\n\nAnswer \"Should you ever rewrite a change log?\".\n\nChanged\n\nImprove argument against commit logs.\nStart following SemVer properly.\n\n0.0.8 - 2015-02-17\nChanged\n\nUpdate year to match in every README example.\nReluctantly stop making fun of Brits only, since most of the world writes dates in a strange way.\n\nFixed\n\nFix typos in recent README changes.\nUpdate outdated unreleased diff link.\n\n0.0.7 - 2015-02-16\nAdded\n\nLink, and make it obvious that date format is ISO 8601.\n\nChanged\n\nClarified the section on \"Is there a standard change log format?\".\n\nFixed\n\nFix Markdown links to tag comparison URL with footnote-style links.\n\n0.0.6 - 2014-12-12\nAdded\n\nREADME section on \"yanked\" releases.\n\n0.0.5 - 2014-08-09\nAdded\n\nMarkdown links to version tags on release headings.\nUnreleased section to gather unreleased changes and encourage note keeping prior to releases.\n\n0.0.4 - 2014-08-09\nAdded\n\nBetter explanation of the difference between the file (\"CHANGELOG\")\nand its function \"the change log\".\n\nChanged\n\nRefer to a \"change log\" instead of a \"CHANGELOG\" throughout the site to differentiate between the file and the purpose\nof the file — the logging of changes.\n\nRemoved\n\nRemove empty sections from CHANGELOG, they occupy too much space and create too much noise in the file. People will\nhave to assume that the missing sections were intentionally left out because they contained no notable changes.\n\n0.0.3 - 2014-08-09\nAdded\n\n\"Why should I care?\" section mentioning The Changelog podcast.\n\n0.0.2 - 2014-07-10\nAdded\n\nExplanation of the recommended reverse chronological release ordering.\n\n0.0.1 - 2014-05-31\nAdded\n\nThis CHANGELOG file to hopefully serve as an evolving example of a standardized open source project CHANGELOG.\nCNAME file to enable GitHub Pages custom domain\nREADME now contains answers to common questions about CHANGELOGs\nGood examples and basic guidelines, including proper date formatting.\nCounter-examples: \"What makes unicorns cry?\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\nWhen contributing to this repository, please first discuss the change you wish to make via issue, email, or any other\nmethod with the owners of this repository before making a change.\nPlease note we have a code of conduct, please follow it in all your interactions with the project.\nPull Request Process\n\nEnsure any install or build dependencies are removed before the end of the layer when doing a build.\nUpdate the README.md with details of changes to the interface, this includes new environment variables, exposed\nports, useful file locations and container parameters.\nIncrease the version numbers in any examples files and the README.md to the new version that this Pull Request would\nrepresent. The versioning scheme we use is SemVer.\nYou may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have\npermission to do that, you may request the second reviewer to merge it for you.\n\nCode of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making\nparticipation in our project and our community a harassment-free experience for everyone, regardless of age, body size,\ndisability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race,\nreligion, or sexual identity and orientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take\nappropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits,\nissues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\nScope\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the\nproject or its community. Examples of representing a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed representative at an online or offline\nevent. Representation of a project may be further defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team\nat [INSERT EMAIL ADDRESS]. All complaints will be reviewed and investigated and will result in a response that is deemed\nnecessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to\nthe reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent\nrepercussions as determined by other members of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available\nat http://contributor-covenant.org/version/1/4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/model/AuthRequest.ts\n            \n            interface\n            AuthRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/model/LoginRequestBody.ts\n            \n            class\n            LoginRequestBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/model/UserPayload.ts\n            \n            interface\n            UserPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/model/UserToken.ts\n            \n            interface\n            UserToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/conflict-error.ts\n            \n            class\n            ConflictError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/database-error.ts\n            \n            class\n            DatabaseError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/not-found-error.ts\n            \n            class\n            NotFoundError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/unauthorized-error.ts\n            \n            class\n            UnauthorizedError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/unique-constraint-error.ts\n            \n            class\n            UniqueConstraintError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/conflict.interceptor.ts\n            \n            injectable\n            ConflictInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/database.interceptor.ts\n            \n            injectable\n            DatabaseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/entity-not-found.interceptor.ts\n            \n            injectable\n            NotFoundInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/unauthorized.interceptor.ts\n            \n            injectable\n            UnauthorizedInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/entities/post.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/handle-database-errors.util.ts\n            \n            variable\n            handleDatabaseErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/is-prisma-error.util.ts\n            \n            variable\n            isPrismaError\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @prisma/client : ^5.10.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PrismaErrors   (src/.../prisma.errors.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/prisma/prisma.errors.ts\n    \n        \n            \n                \n                    \n                        \n                        PrismaErrors\n                    \n                \n                        \n                            \n                                 UniqueConstraintFail\n                            \n                        \n                        \n                            \n                                Value : P2002\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPostsModule -->\n\nPrismaService->PostsModule\n\n\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nExample of TODO.md\nThis is an example of TODO.md\nView the raw content of this file to understand the format.\nTodo\n\n Work on the website ~3d #feat @john 2020-03-20\n Fix the homepage ~1d #bug @jane\n Sub-task or description\n\n\n\nIn Progress\n\n Work on Github Repo [JIRA-345]\n\nDone ✓\n\n Create my first TODO.md\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PrismaClientError   (src/.../prisma-client-error.ts)\n                        \n                        \n                            UserFromJwt   (src/.../UserFromJwt.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/errors/prisma-client-error.ts\n    \n    \n        \n            \n                \n                    \n                    PrismaClientError\n                \n            \n            \n                \n                        PrismaClientKnownRequestError\n\n                \n            \n        \n    \n    src/auth/model/UserFromJwt.ts\n    \n    \n        \n            \n                \n                    \n                    UserFromJwt\n                \n            \n            \n                \n                            Partial\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            handleDatabaseErrors   (src/.../handle-database-errors.util.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            isPrismaError   (src/.../is-prisma-error.util.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/handle-database-errors.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleDatabaseErrors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (e: PrismaClientError): Error => {\n  switch (e.code) {\n    case PrismaErrors.UniqueConstraintFail:\n      return new UniqueConstraintError(e);\n\n    default:\n      return new DatabaseError(e.message);\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/utils/is-prisma-error.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isPrismaError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (e: PrismaClientError): boolean => {\n  return (\n    typeof e.code === 'string' &&\n    typeof e.clientVersion === 'string' &&\n    (typeof e.meta === 'undefined' ||\n      (typeof e.meta === 'object' &&\n        (typeof e.meta.target === 'string' ||\n          (Array.isArray(e.meta.target) &&\n            e.meta.target.every((item) => typeof item === 'string')))))\n  );\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
